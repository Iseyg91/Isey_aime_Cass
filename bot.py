import discord
from discord.ext import commands, tasks
from discord import app_commands, Embed, ButtonStyle, ui
from discord.ui import Button, View, Select, Modal, TextInput, button
from discord.ui import Modal, TextInput, Button, View
from discord.utils import get
from discord import TextStyle
from functools import wraps
import os
from discord import app_commands, Interaction, TextChannel, Role
import io
import random
import asyncio
import time
import re
import subprocess
import sys
import math
import traceback
from keep_alive import keep_alive
from datetime import datetime, timedelta
from collections import defaultdict, deque
import pymongo
from pymongo import MongoClient
from motor.motor_asyncio import AsyncIOMotorClient
import psutil
import pytz
import platform
from discord.ui import Select, View
import random
import discord
from discord.ext import commands
from datetime import datetime, timedelta


token = os.environ['ETHERYA']
intents = discord.Intents.all()
start_time = time.time()
bot = commands.Bot(command_prefix="!!", intents=intents, help_command=None)

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_DB")  # URI de connexion √† MongoDB
print("Mongo URI :", mongo_uri)  # Cela affichera l'URI de connexion (assure-toi de ne pas laisser cela en prod)
client = MongoClient(mongo_uri)
db = client['Cass-Eco2']

# Collections
collection = db['ether_eco']  #Stock les Bal
collection2 = db['ether_daily']  #Stock les cd de daily
collection3 = db['ether_slut']  #Stock les cd de slut
collection4 = db['ether_crime']  #Stock les cd de slut
collection5 = db['ether_collect'] #Stock les cd de collect
collection6 = db['ether_work'] #Stock les cd de Work
collection7 = db['ether_inventory'] #Stock les inventaires
collection8 = db['info_cf'] #Stock les Info du cf
collection9 = db['info_logs'] #Stock le Salon logs
collection10 = db['info_bj'] #Stock les Info du Bj
collection11 = db['info_rr'] #Stock les Info de RR
collection12 = db['info_roulette'] #Stock les Info de SM
collection13 = db['info_sm'] #Stock les Info de SM
collection14 = db['ether_rob'] #Stock les cd de Rob

def get_cf_config(guild_id):
    config = collection8.find_one({"guild_id": guild_id})
    if not config:
        # Valeurs par d√©faut
        config = {
            "guild_id": guild_id,
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection8.insert_one(config)
    return config

async def log_eco_channel(bot, guild_id, user, action, amount, balance_before, balance_after, note=""):
    config = collection9.find_one({"guild_id": guild_id})
    channel_id = config.get("eco_log_channel") if config else None

    if not channel_id:
        return  # Aucun salon configur√©

    channel = bot.get_channel(channel_id)
    if not channel:
        return  # Salon introuvable (peut avoir √©t√© supprim√©)

    embed = discord.Embed(
        title="üí∏ Log √âconomique",
        color=discord.Color.gold(),
        timestamp=datetime.utcnow()
    )
    embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else None)
    embed.add_field(name="Action", value=action, inline=True)
    embed.add_field(name="Montant", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Solde", value=f"Avant: {balance_before}\nApr√®s: {balance_after}", inline=False)

    if note:
        embed.add_field(name="Note", value=note, inline=False)

    await channel.send(embed=embed)

def load_guild_settings(guild_id):
    # Charger les donn√©es de la collection principale
    ether_eco_data = collection.find_one({"guild_id": guild_id}) or {}
    ether_daily_data = collection2.find_one({"guild_id": guild_id}) or {}
    ether_slut_data = collection3.find_one({"guild_id": guild_id}) or {}
    ether_crime_data = collection4.find_one({"guild_id": guild_id}) or {}
    ether_collect = collection5.find_one({"guild_id": guild_id}) or {}
    ether_work_data = collection6.find_one({"guild_id": guild_id}) or {}
    ether_inventory_data = collection7.find_one({"guild_id": guild_id}) or {}
    info_cf_data = collection8.find_one({"guild_id": guild_id}) or {}
    info_logs_data = collection9.find_one({"guild_id": guild_id}) or {}
    info_bj_data = collection10.find_one({"guild_id": guild_id}) or {}
    info_rr_data = collection11.find_one({"guild_id": guild_id}) or {}
    info_roulette_data = collection12.find_one({"guild_id": guild_id}) or {}
    info_sm_roulette_data = collection13.find_one({"guild_id": guild_id}) or {}
    ether_rob_data = collection14.find_one({"guild_id": guild_id}) or {}

    # D√©bogage : Afficher les donn√©es de setup
    print(f"Setup data for guild {guild_id}: {setup_data}")

    combined_data = {
        "ether_eco": ether_eco_data,
        "ether_daily": ether_daily_data,
        "ether_slut": ether_slut_data,
        "ether_crime": ether_crime_data,
        "ether_collect": ether_collect_data,
        "ether_work": ether_work_data,
        "ether_inventory": ether_inventory_data,
        "info_cf": info_cf_data,
        "info_logs": info_logs_data,
        "info_bj": info_bj_data,
        "info_rr": info_rr_data,
        "info_roulette": info_roulette_data,
        "info_sm": info_sm_data,
        "ether_rob": ether_rob_data

    }

    return combined_data

@bot.event
async def on_ready():
    print(f"‚úÖ Le bot {bot.user} est maintenant connect√© ! (ID: {bot.user.id})")

    # Mise √† jour du statut avec l'activit√© de stream "Etherya"
    activity = discord.Activity(type=discord.ActivityType.streaming, name="Etherya", url="https://www.twitch.tv/tonstream")
    await bot.change_presence(activity=activity, status=discord.Status.online)

    print(f"üéâ **{bot.user}** est maintenant connect√© et affiche son activit√© de stream avec succ√®s !")

    # Afficher les commandes charg√©es
    print("üìå Commandes disponibles üòä")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        # Synchroniser les commandes avec Discord
        synced = await bot.tree.sync()  # Synchronisation des commandes slash
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")

# Gestion des erreurs globales pour toutes les commandes
@bot.event
async def on_error(event, *args, **kwargs):
    print(f"Une erreur s'est produite : {event}")
    embed = discord.Embed(
        title="‚ùó Erreur inattendue",
        description="Une erreur s'est produite lors de l'ex√©cution de la commande. Veuillez r√©essayer plus tard.",
        color=discord.Color.red()
    )
    await args[0].response.send_message(embed=embed)

@bot.event
async def on_message(message):
    # Ignorer les messages du bot lui-m√™me
    if message.author.bot:
        return

    # Obtenir les informations de l'utilisateur
    user = message.author
    guild_id = message.guild.id
    user_id = user.id

    # G√©n√©rer un montant al√©atoire entre 5 et 20 coins
    coins_to_add = random.randint(5, 20)

    # Ajouter les coins au portefeuille de l'utilisateur
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"wallet": coins_to_add}},
        upsert=True
    )

    # Appeler le traitement habituel des commandes
    await bot.process_commands(message)

@bot.hybrid_command(
    name="uptime",
    description="Affiche l'uptime du bot."
)
async def uptime(ctx):
    uptime_seconds = round(time.time() - start_time)
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    embed = discord.Embed(
        title="Uptime du bot",
        description=f"Le bot est en ligne depuis : {days} jours, {hours} heures, {minutes} minutes, {seconds} secondes",
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.hybrid_command(name="balance", aliases=["bal", "money"], description="Affiche ta balance ou celle d'un autre utilisateur.")
async def bal(ctx: commands.Context, user: discord.User = None):
    user = user or ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Cherche les donn√©es de l'utilisateur
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id})

    # Si l'utilisateur n'a pas de donn√©es, on initialise avec 1500 coins en portefeuille
    if not data:
        data = {
            "guild_id": guild_id,
            "user_id": user_id,
            "wallet": 1500,
            "bank": 0
        }
        collection.insert_one(data)

    # R√©cup√©ration des donn√©es √† afficher
    balance = data.get("wallet", 0)
    bank = data.get("bank", 0)
    total = balance + bank

    # Cr√©ation de l'embed
    embed = discord.Embed(title=f"üí∞ Balance de {user.display_name}", color=discord.Color.gold())
    embed.add_field(name="Portefeuille", value=f"{balance} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Banque", value=f"{bank} üè¶", inline=True)
    embed.add_field(name="Total", value=f"{total} üíµ", inline=False)
    embed.set_footer(text=f"Demand√© par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="deposit", aliases=["dep"], description="D√©pose de l'argent de ton portefeuille vers ta banque.")
@app_commands.describe(amount="Montant √† d√©poser (ou 'all')")
async def deposit(ctx: commands.Context, amount: str = None):
    if amount is None:
        return await ctx.send("‚ùå Tu dois sp√©cifier un montant ou `all`.")

    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Chercher les donn√©es actuelles
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 0, "bank": 0}

    wallet = data.get("wallet", 0)
    bank = data.get("bank", 0)

    # G√©rer le cas "all"
    if amount.lower() == "all":
        if wallet == 0:
            return await ctx.send("üí∏ Tu n'as rien √† d√©poser.")
        deposited_amount = wallet
    else:
        # V√©rifie que c'est un nombre valide
        if not amount.isdigit():
            return await ctx.send("‚ùå Montant invalide. Utilise un nombre ou `all`.")
        deposited_amount = int(amount)
        if deposited_amount <= 0:
            return await ctx.send("‚ùå Tu dois d√©poser un montant sup√©rieur √† z√©ro.")
        if deposited_amount > wallet:
            return await ctx.send("‚ùå Tu n'as pas assez d'argent dans ton portefeuille.")

    # Mise √† jour dans la base de donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"wallet": -deposited_amount, "bank": deposited_amount}},
        upsert=True
    )

    # Cr√©ation de l'embed de succ√®s
    embed = discord.Embed(
        title="‚úÖ D√©p√¥t effectu√© avec succ√®s!",
        description=f"Tu as d√©pos√© **{deposited_amount} <:ecoEther:1341862366249357374>** dans ta banque.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Demande effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="withdraw", aliases=["with"], description="Retire de l'argent de ta banque vers ton portefeuille.")
async def withdraw(ctx: commands.Context, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Chercher les donn√©es actuelles
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 0, "bank": 0}

    wallet = data.get("wallet", 0)
    bank = data.get("bank", 0)

    # G√©rer le cas "all"
    if amount.lower() == "all":
        if bank == 0:
            return await ctx.send("üí∏ Tu n'as rien √† retirer.")
        withdrawn_amount = bank
    else:
        # V√©rifie que c'est un nombre valide
        if not amount.isdigit():
            return await ctx.send("‚ùå Montant invalide. Utilise un nombre ou `all`.")
        withdrawn_amount = int(amount)
        if withdrawn_amount <= 0:
            return await ctx.send("‚ùå Tu dois retirer un montant sup√©rieur √† z√©ro.")
        if withdrawn_amount > bank:
            return await ctx.send("‚ùå Tu n'as pas assez d'argent dans ta banque.")

    # Mise √† jour dans la base de donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"wallet": withdrawn_amount, "bank": -withdrawn_amount}},
        upsert=True
    )

    # Cr√©ation de l'embed de succ√®s
    embed = discord.Embed(
        title="‚úÖ Retrait effectu√© avec succ√®s!",
        description=f"Tu as retir√© **{withdrawn_amount} <:ecoEther:1341862366249357374>** de ta banque vers ton portefeuille.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Demande effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="add-money", description="Ajoute de l'argent √† un utilisateur (r√©serv√© aux administrateurs).")
@app_commands.describe(
    user="L'utilisateur √† cr√©diter",
    amount="Le montant √† ajouter",
    account="Choisis o√π ajouter l'argent : bank ou wallet"
)
@commands.has_permissions(administrator=True)
async def add_money(ctx: commands.Context, user: discord.User, amount: int, account: str):
    if account.lower() not in ["wallet", "bank"]:
        return await ctx.send("‚ùå Veuillez choisir `wallet` ou `bank` comme compte cible.")

    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† z√©ro.")

    guild_id = ctx.guild.id
    user_id = user.id

    # R√©cup√©rer l'√©tat actuel du solde pour cet utilisateur
    balance_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    balance_before = balance_data.get(account.lower(), 0) if balance_data else 0

    # Mise √† jour MongoDB
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {account.lower(): amount}},
        upsert=True
    )

    # Nouveau solde apr√®s l'ajout
    balance_after = balance_before + amount

    # Log dans le salon de logs √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Ajout d'argent",
        amount,
        balance_before,
        balance_after,
        f"Ajout de {amount} <:ecoEther:1341862366249357374> dans le compte {account.lower()} de {user.mention} par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Argent ajout√© avec succ√®s !",
        description=f"**{amount} <:ecoEther:1341862366249357374>** a √©t√© ajout√© √† {user.mention} dans son **{account.lower()}**.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@add_money.error
async def add_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("üö´ Tu n'as pas la permission d'utiliser cette commande.")

@bot.hybrid_command(name="remove-money", description="Retire de l'argent √† un utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† retirer", location="Choisis entre wallet ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Wallet", value="wallet"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def remove_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† 0.")

    guild_id = ctx.guild.id
    user_id = user.id

    field = location.value

    # V√©rifie le solde actuel
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 0, "bank": 0}
    current_balance = data.get(field, 0)

    if current_balance < amount:
        return await ctx.send(f"‚ùå {user.display_name} n'a pas assez de fonds dans son `{field}` pour retirer {amount} <:ecoEther:1341862366249357374>.")

    # Solde avant le retrait
    balance_before = current_balance

    # Mise √† jour dans la base de donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {field: -amount}},
        upsert=True
    )

    # Solde apr√®s le retrait
    balance_after = balance_before - amount

    # Log dans le salon de logs √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Retrait d'argent",
        -amount,
        balance_before,
        balance_after,
        f"Retrait de {amount} <:ecoEther:1341862366249357374> dans le compte {field} de {user.mention} par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Retrait effectu√© avec succ√®s !",
        description=f"**{amount} <:ecoEther:1341862366249357374>** a √©t√© retir√© de la **{field}** de {user.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@remove_money.error
async def remove_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="set-money", description="D√©finit un montant exact dans le wallet ou la bank d‚Äôun utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† d√©finir", location="Choisis entre wallet ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Wallet", value="wallet"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def set_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount < 0:
        return await ctx.send("‚ùå Le montant ne peut pas √™tre n√©gatif.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel avant modification
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 0, "bank": 0}
    balance_before = data.get(field, 0)

    # Mise √† jour de la base de donn√©es pour d√©finir le montant exact
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {field: amount}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "D√©finition du solde",
        amount - balance_before,  # Calcul du changement de solde
        balance_before,
        amount,
        f"Le solde du compte `{field}` de {user.mention} a √©t√© d√©fini √† {amount} <:ecoEther:1341862366249357374> par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Montant d√©fini avec succ√®s !",
        description=f"Le montant de **{field}** de {user.mention} a √©t√© d√©fini √† **{amount} <:ecoEther:1341862366249357374>**.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@set_money.error
async def set_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="pay", description="Paie un utilisateur avec tes coins.")
@app_commands.describe(user="L'utilisateur √† qui envoyer de l'argent", amount="Montant √† transf√©rer")
async def pay(ctx: commands.Context, user: discord.User, amount: int):
    sender = ctx.author
    if user.id == sender.id:
        return await ctx.send("‚ùå Tu ne peux pas te payer toi-m√™me.")
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† z√©ro.")

    guild_id = ctx.guild.id

    # R√©cup√®re les donn√©es de l'exp√©diteur
    sender_data = collection.find_one({"guild_id": guild_id, "user_id": sender.id}) or {"wallet": 0}
    if sender_data["wallet"] < amount:
        return await ctx.send("‚ùå Tu n‚Äôas pas assez d'argent dans ton wallet.")

    # D√©duit les fonds de l'exp√©diteur
    collection.update_one(
        {"guild_id": guild_id, "user_id": sender.id},
        {"$inc": {"wallet": -amount}},
        upsert=True
    )

    # Ajoute les fonds au destinataire
    collection.update_one(
        {"guild_id": guild_id, "user_id": user.id},
        {"$inc": {"wallet": amount}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Paiement effectu√©",
        -amount,  # Le payeur perd de l'argent
        sender_data["wallet"],
        sender_data["wallet"] - amount,
        f"{sender.mention} a pay√© **{amount} <:ecoEther:1341862366249357374>** √† {user.mention}."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Paiement effectu√© avec succ√®s !",
        description=f"{sender.mention} a pay√© **{amount} <:ecoEther:1341862366249357374>** √† {user.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Demande effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@pay.error
async def pay_error(ctx, error):
    await ctx.send("‚ùå Une erreur est survenue lors du paiement.")

@bot.hybrid_command(name="work", aliases=["wk"], description="Travaille et gagne de l'argent !")
async def work(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rifier le cooldown de 30 minutes
    now = datetime.utcnow()
    cooldown_data = collection6.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_work_time = cooldown_data.get("last_work_time", None)

    if last_work_time:
        time_diff = now - last_work_time
        if time_diff < timedelta(minutes=30):
            remaining_time = timedelta(minutes=30) - time_diff
            minutes_left = remaining_time.total_seconds() // 60
            return await ctx.send(f"‚ùå Tu dois attendre encore **{int(minutes_left)} minutes** avant de pouvoir retravailler.")

    # Gagner de l'argent entre 200 et 2000
    amount = random.randint(200, 2000)

    # Liste de 20 messages possibles
    messages = [
        f"Tu as travaill√© dur et gagn√© **{amount} <:ecoEther:1341862366249357374>**. Bien jou√© !",
        f"Bravo ! Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** apr√®s ton travail.",
        f"Tu as travaill√© avec assiduit√© et tu r√©coltes **{amount} <:ecoEther:1341862366249357374>**.",
        f"Du bon travail ! Voici **{amount} <:ecoEther:1341862366249357374>** pour toi.",
        f"F√©licitations, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** pour ton travail.",
        f"Gr√¢ce √† ton travail, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** apr√®s une journ√©e de travail bien remplie !",
        f"Un bon travail m√©rite **{amount} <:ecoEther:1341862366249357374>**. F√©licitations !",
        f"Apr√®s une journ√©e difficile, tu r√©coltes **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu as travaill√© dur et m√©rites tes **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu as fait un excellent travail et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Un travail acharn√© rapporte **{amount} <:ecoEther:1341862366249357374>**.",
        f"Bien jou√© ! **{amount} <:ecoEther:1341862366249357374>** ont √©t√© ajout√©s √† ta balance.",
        f"Ton travail t'a rapport√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu as bien boss√© et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Les fruits de ton travail : **{amount} <:ecoEther:1341862366249357374>**.",
        f"Un travail bien fait t'a rapport√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu es pay√© pour ton dur labeur : **{amount} <:ecoEther:1341862366249357374>**.",
        f"Voici ta r√©compense pour ton travail : **{amount} <:ecoEther:1341862366249357374>**.",
        f"Ton travail t'a rapport√© une belle somme de **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** pour ta pers√©v√©rance et ton travail.",
    ]

    # S√©lectionner un message au hasard
    message = random.choice(messages)

    # R√©cup√©rer le solde avant l'ajout d'argent
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 0}
    initial_balance = user_data["wallet"]

    # Mettre √† jour le cooldown et l'argent de l'utilisateur
    collection6.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_work_time": now}},
        upsert=True
    )

    # Ajouter de l'argent au wallet de l'utilisateur
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"wallet": amount}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Travail effectu√©",
        amount,  # L'utilisateur gagne de l'argent
        initial_balance,
        initial_balance + amount,
        f"{user.mention} a gagn√© **{amount} <:ecoEther:1341862366249357374>** pour son travail."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Travail accompli avec succ√®s !",
        description=f"{user.mention}, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** pour ton travail.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@work.error
async def work_error(ctx, error):
    await ctx.send("‚ùå Une erreur est survenue lors de la commande de travail.")

@bot.hybrid_command(name="slut", description="Essaie ta chance et gagne ou perds de l'argent.")
async def slut(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rifier le cooldown de 30 minutes
    now = datetime.utcnow()
    cooldown_data = collection3.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_slut_time = cooldown_data.get("last_slut_time", None)

    if last_slut_time:
        time_diff = now - last_slut_time
        if time_diff < timedelta(minutes=30):
            remaining_time = timedelta(minutes=30) - time_diff
            minutes_left = remaining_time.total_seconds() // 60
            return await ctx.send(f"‚ùå Tu dois attendre encore **{int(minutes_left)} minutes** avant de pouvoir recommencer.")

    # Gagner ou perdre de l'argent
    gain_or_loss = random.choice(["gain", "loss"])

    if gain_or_loss == "gain":
        amount = random.randint(250, 2000)
        # Liste de 20 messages de succ√®s
        messages = [
            f"Tu as eu de la chance et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"F√©licitations ! Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Bravo, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** gr√¢ce √† ta chance.",
            f"Tu as r√©ussi √† gagner **{amount} <:ecoEther:1341862366249357374>**.",
            f"Bien jou√© ! Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Une grande chance t'a souri, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**. Continue comme √ßa !",
            f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**. Bien jou√© !",
            f"Chanceux, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Une belle r√©compense ! **{amount} <:ecoEther:1341862366249357374>** pour toi.",
            f"Tu as r√©colt√© **{amount} <:ecoEther:1341862366249357374>** gr√¢ce √† ta chance.",
            f"Tu es vraiment chanceux, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as fait un gros coup, **{amount} <:ecoEther:1341862366249357374>** pour toi.",
            f"Tu as de la chance, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as fait le bon choix, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ta chance t'a permis de gagner **{amount} <:ecoEther:1341862366249357374>**.",
            f"Voici ta r√©compense de **{amount} <:ecoEther:1341862366249357374>** pour ta chance.",
            f"Bravo, tu es maintenant plus riche de **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>**. F√©licitations !",
            f"Ta chance t'a permis de remporter **{amount} <:ecoEther:1341862366249357374>**."
        ]
        # S√©lectionner un message au hasard
        message = random.choice(messages)

        # Ajouter de l'argent au wallet de l'utilisateur
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": amount}},
            upsert=True
        )

    else:
        amount = random.randint(250, 2000)
        # Liste de 20 messages de perte
        messages = [
            f"Malheureusement, tu as perdu **{amount} <:ecoEther:1341862366249357374>**.",
            f"D√©sol√©, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"La chance ne t'a pas souri cette fois, tu as perdu **{amount} <:ecoEther:1341862366249357374>**.",
            f"T'as perdu **{amount} <:ecoEther:1341862366249357374>**. Mieux vaut retenter une autre fois.",
            f"Ah non, tu as perdu **{amount} <:ecoEther:1341862366249357374>**.",
            f"Pas de chance, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Oups, tu perds **{amount} <:ecoEther:1341862366249357374>** cette fois.",
            f"Pas de chance, tu viens de perdre **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as perdu **{amount} <:ecoEther:1341862366249357374>**. C'est dommage.",
            f"Tu as fait une mauvaise chance, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ce coup-ci, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Malheureusement, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"T'es tomb√© sur une mauvaise chance, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu perds **{amount} <:ecoEther:1341862366249357374>**. Retente ta chance !",
            f"T'as perdu **{amount} <:ecoEther:1341862366249357374>**. La prochaine sera la bonne.",
            f"Pas de chance, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as perdu **{amount} <:ecoEther:1341862366249357374>** cette fois.",
            f"Tu perds **{amount} <:ecoEther:1341862366249357374>**. Essaye encore !",
            f"Tu n'as pas eu de chance, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu perds **{amount} <:ecoEther:1341862366249357374>**. La chance reviendra !"
        ]
        # S√©lectionner un message de perte au hasard
        message = random.choice(messages)

        # D√©duire de l'argent du wallet de l'utilisateur
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": -amount}},
            upsert=True
        )

    # Mettre √† jour le cooldown
    collection3.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_slut_time": now}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Chance",
        amount if gain_or_loss == "gain" else -amount,  # L'utilisateur gagne ou perd de l'argent
        None,  # Aucun solde avant, uniquement gain/perte
        None,  # Aucun solde apr√®s
        message  # Message de r√©sultat
    )

    # Cr√©ation de l'embed de r√©sultat
    embed = discord.Embed(
        title="üé∞ R√©sultat de ta chance",
        description=message,
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"Action effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@slut.error
async def slut_error(ctx, error):
    await ctx.send("‚ùå Une erreur est survenue lors de la commande.")

@bot.hybrid_command(name="crime", description="Participe √† un crime pour essayer de gagner de l'argent, mais attention, tu pourrais perdre !")
async def crime(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rifier le cooldown de 30 minutes
    now = datetime.utcnow()
    cooldown_data = collection4.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_crime_time = cooldown_data.get("last_crime_time", None)

    if last_crime_time:
        time_diff = now - last_crime_time
        if time_diff < timedelta(minutes=30):
            remaining_time = timedelta(minutes=30) - time_diff
            minutes_left = remaining_time.total_seconds() // 60
            return await ctx.send(f"‚ùå Tu dois attendre encore **{int(minutes_left)} minutes** avant de pouvoir recommencer.")

    # Gagner ou perdre de l'argent
    gain_or_loss = random.choice(["gain", "loss"])

    if gain_or_loss == "gain":
        amount = random.randint(250, 2000)
        # Liste de 20 messages de succ√®s
        messages = [
            f"Tu as r√©ussi ton crime et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"F√©licitations ! Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** apr√®s ton crime.",
            f"Bien jou√©, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** gr√¢ce √† ton coup de ma√Ætre.",
            # ... (les autres messages)
        ]
        # S√©lectionner un message de succ√®s au hasard
        message = random.choice(messages)

        # Ajouter de l'argent au wallet de l'utilisateur
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": amount}},
            upsert=True
        )

        # Log dans le salon √©conomique
        balance_before = collection.find_one({"guild_id": guild_id, "user_id": user_id}).get("wallet", 0)
        balance_after = balance_before + amount
        await log_eco_channel(bot, guild_id, user, "Gain apr√®s crime", amount, balance_before, balance_after)

    else:
        amount = random.randint(250, 2000)
        # Liste de 20 messages de perte
        messages = [
            f"Malheureusement, ton crime a √©chou√© et tu as perdu **{amount} <:ecoEther:1341862366249357374>**.",
            f"Pas de chance, tu perds **{amount} <:ecoEther:1341862366249357374>** apr√®s ton crime.",
            f"Ton crime a √©chou√© et tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            # ... (les autres messages)
        ]
        # S√©lectionner un message de perte au hasard
        message = random.choice(messages)

        # D√©duire de l'argent du wallet de l'utilisateur
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": -amount}},
            upsert=True
        )

        # Log dans le salon √©conomique
        balance_before = collection.find_one({"guild_id": guild_id, "user_id": user_id}).get("wallet", 0)
        balance_after = balance_before - amount
        await log_eco_channel(bot, guild_id, user, "Perte apr√®s crime", amount, balance_before, balance_after)

    # Mettre √† jour le cooldown
    collection4.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_crime_time": now}},
        upsert=True
    )

    # Cr√©ation de l'embed de r√©sultat
    embed = discord.Embed(
        title="üí• R√©sultat de ton crime",
        description=message,
        color=discord.Color.red()
    )
    embed.set_footer(text=f"Action effectu√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@crime.error
async def crime_error(ctx, error):
    await ctx.send("‚ùå Une erreur est survenue lors de la commande.")

@bot.command(name="buy", aliases=["chicken", "c", "h", "i", "k", "e", "n"])
async def buy_item(ctx, item: str = "chicken"):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Forcer l'achat d'un chicken pour toutes les aliases
    item = "chicken"

    # V√©rifier si l'utilisateur poss√®de d√©j√† un poulet
    data = collection7.find_one({"guild_id": guild_id, "user_id": user_id})
    if data and data.get("chicken", False):
        await ctx.send(f"{user.mention}, tu as d√©j√† un poulet ! Tu ne peux pas en acheter un autre tant que tu n'as pas perdu le pr√©c√©dent.")
        return

    # V√©rifier le solde de l'utilisateur
    balance_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("wallet", 0) if balance_data else 0

    # Liste des objets √† acheter et leurs prix
    items_for_sale = {
        "chicken": 100,
    }

    # V√©rification de l'objet choisi
    if item in items_for_sale:
        price = items_for_sale[item]

        if balance >= price:
            # Retirer l'argent du wallet de l'utilisateur
            collection.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$inc": {"wallet": -price}},
                upsert=True
            )

            # Ajouter l'objet au profil de l'utilisateur (ici, un poulet)
            collection7.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$set": {item: True}},
                upsert=True
            )

            # Logs √©conomiques
            balance_after = balance - price
            await log_eco_channel(
                bot, guild_id, user, "Achat", price, balance, balance_after,
                f"Achat d'un **{item}**"
            )

            # Cr√©ation d'un embed pour rendre l'achat plus visuel
            embed = discord.Embed(
                title=f"Achat r√©ussi !",
                description=f"{user.mention} a achet√© un **{item}** pour **{price} <:ecoEther:1341862366249357374>** !",
                color=discord.Color.green()
            )
            embed.set_footer(text=f"Merci pour ton achat !")
            await ctx.send(embed=embed)

        else:
            await ctx.send(f"{user.mention}, tu n'as pas assez de coins pour acheter un **{item}** !")

    else:
        await ctx.send(f"{user.mention}, cet objet n'est pas disponible √† l'achat.")

@bot.command(name="cock-fight", aliases=["cf"])
async def cock_fight(ctx, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    config = get_cf_config(guild_id)
    max_bet = config.get("max_bet", 20000)
    max_chance = config.get("max_chance", 100)
    start_chance = config.get("start_chance", 50)

    data = collection7.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data or not data.get("chicken", False):
        await ctx.send(f"{user.mention}, tu n'as pas de poulet ! Utilise la commande `!!buy chicken` pour en acheter un.")
        return

    balance_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("wallet", 0) if balance_data else 0

    if amount.lower() == "all":
        if balance == 0:
            await ctx.send(f"{user.mention}, ton portefeuille est vide.")
            return
        if balance > max_bet:
            await ctx.send(f"{user.mention}, ta mise d√©passe la limite de **{max_bet} <:ecoEther:1341862366249357374>**.")
            return
        amount = balance

    elif amount.lower() == "half":
        if balance == 0:
            await ctx.send(f"{user.mention}, ton portefeuille est vide.")
            return
        amount = balance // 2
        if amount > max_bet:
            await ctx.send(f"{user.mention}, la moiti√© de ton portefeuille d√©passe la limite de **{max_bet} <:ecoEther:1341862366249357374>**.")
            return

    else:
        try:
            amount = int(amount)
        except ValueError:
            await ctx.send(f"{user.mention}, entre un montant valide, ou utilise `all` ou `half`.")
            return

    if amount > balance:
        await ctx.send(f"{user.mention}, tu n'as pas assez de coins pour cette mise.")
        return
    if amount <= 0:
        await ctx.send(f"{user.mention}, la mise doit √™tre positive.")
        return
    if amount > max_bet:
        await ctx.send(f"{user.mention}, la mise est limit√©e √† **{max_bet} <:ecoEther:1341862366249357374>**.")
        return

    win_data = collection6.find_one({"guild_id": guild_id, "user_id": user_id})
    win_chance = win_data.get("win_chance") if win_data and "win_chance" in win_data else start_chance

    if random.randint(1, 100) <= win_chance:
        win_amount = amount
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": win_amount}},
            upsert=True
        )
        new_chance = min(win_chance + 1, max_chance)
        collection6.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"win_chance": new_chance}},
            upsert=True
        )

        embed = discord.Embed(
            description=f"Your lil chicken won the fight, and made you <:ecoEther:1341862366249357374> **{win_amount}** richer! üêì",
            color=discord.Color.green()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text=f"Chicken strength (chance of winning): {new_chance}%")
        await ctx.send(embed=embed)

        balance_after = balance + win_amount
        await log_eco_channel(
            bot, guild_id, user, "Victoire au Cock-Fight", win_amount, balance, balance_after,
            f"Victoire au Cock-Fight avec un gain de **{win_amount}**"
        )

    else:
        collection7.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"chicken": False}}
        )
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"wallet": -amount}},
            upsert=True
        )
        collection6.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"win_chance": start_chance}},
            upsert=True
        )

        embed = discord.Embed(
            description="Your chicken died <:imageremovebgpreview53:1362693948702855360>",
            color=discord.Color.red()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text="Chicken strength reset.")
        await ctx.send(embed=embed)

        balance_after = balance - amount
        await log_eco_channel(
            bot, guild_id, user, "D√©faite au Cock-Fight", -amount, balance, balance_after,
            f"D√©faite au Cock-Fight avec une perte de **{amount}**"
        )

@bot.command(name="set-cf-depart-chance")
@commands.has_permissions(administrator=True)
async def set_depart_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-depart-chance 50`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"start_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance de d√©part", inline=True)
            embed.add_field(name="Chance de d√©part", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance de d√©part a √©t√© mise √† **{pourcent}%**.")


@bot.command(name="set-cf-max-chance")
@commands.has_permissions(administrator=True)
async def set_max_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-max-chance 90`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance maximale de victoire", inline=True)
            embed.add_field(name="Chance maximale", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance maximale de victoire est maintenant de **{pourcent}%**.")

@bot.command(name="set-cf-mise-max")
@commands.has_permissions(administrator=True)
async def set_max_mise(ctx, amount: str = None):
    if amount is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier une mise maximale (nombre entier positif). Exemple : `!set-cf-mise-max 1000`")

    if not amount.isdigit():
        return await ctx.send("‚ö†Ô∏è La mise maximale doit √™tre un **nombre entier**.")

    amount = int(amount)
    if amount <= 0:
        return await ctx.send("‚ùå La mise maximale doit √™tre un **nombre sup√©rieur √† 0**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle mise maximale
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_bet": amount}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la mise maximale", inline=True)
            embed.add_field(name="Mise maximale", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La mise maximale a √©t√© mise √† **{amount} <:ecoEther:1341862366249357374>**.")

# Gestion des erreurs li√©es aux permissions
@set_depart_chance.error
@set_max_chance.error
@set_max_mise.error
async def cf_config_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
    elif isinstance(error, commands.CommandInvokeError):
        await ctx.send("‚ùå Une erreur est survenue lors de l‚Äôex√©cution de la commande.")
        print(f"[ERREUR] {error}")
    else:
        await ctx.send("‚ö†Ô∏è Une erreur inconnue est survenue.")
        print(f"[ERREUR INCONNUE] {error}")

class CFConfigView(ui.View):
    def __init__(self, guild_id):
        super().__init__(timeout=60)
        self.guild_id = guild_id

    @ui.button(label="üîÑ Reset aux valeurs par d√©faut", style=discord.ButtonStyle.red)
    async def reset_defaults(self, interaction: Interaction, button: ui.Button):
        # V√©rifier si l'utilisateur est admin
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("Tu n'as pas la permission de faire √ßa.", ephemeral=True)
            return

        # Reset config
        default_config = {
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection8.update_one(
            {"guild_id": self.guild_id},
            {"$set": default_config},
            upsert=True
        )
        await interaction.response.send_message("‚úÖ Les valeurs par d√©faut ont √©t√© r√©tablies.", ephemeral=True)

@bot.command(name="cf-config")
@commands.has_permissions(administrator=True)
async def cf_config(ctx):
    guild_id = ctx.guild.id
    config = get_cf_config(guild_id)

    start_chance = config.get("start_chance", 50)
    max_chance = config.get("max_chance", 100)
    max_bet = config.get("max_bet", 20000)

    embed = discord.Embed(
        title="‚öôÔ∏è Configuration Cock-Fight",
        color=discord.Color.gold()
    )
    embed.add_field(name="üéØ Chance de d√©part", value=f"**{start_chance}%**", inline=False)
    embed.add_field(name="üìà Chance max", value=f"**{max_chance}%**", inline=False)
    embed.add_field(name="üí∞ Mise maximale", value=f"**{max_bet} <:ecoEther:1341862366249357374>**", inline=False)
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed, view=CFConfigView(guild_id))

@bot.command(name="set-eco-log")
@commands.has_permissions(administrator=True)
async def set_eco_log(ctx, channel: discord.TextChannel):
    guild_id = ctx.guild.id
    collection9.update_one(
        {"guild_id": guild_id},
        {"$set": {"eco_log_channel": channel.id}},
        upsert=True
    )
    await ctx.send(f"‚úÖ Les logs √©conomiques seront envoy√©s dans {channel.mention}")

@bot.command(aliases=["bj"])
async def blackjack(ctx, mise: int):
    # R√©cup√©ration de la configuration du Blackjack dans la base de donn√©es
    guild_id = ctx.guild.id
    user_id = ctx.author.id

    # Charger ou initialiser la configuration de la mise maximale
    bj_config = collection10.find_one({"guild_id": guild_id})
    if not bj_config:
        bj_config = {
            "guild_id": guild_id,
            "max_mise": 30000  # Valeur par d√©faut de la mise maximale
        }
        collection10.insert_one(bj_config)

    max_mise = bj_config["max_mise"]

    # V√©rification que la mise est valide
    if mise <= 0 or mise > max_mise:
        embed = discord.Embed(
            title="‚ùå Mise invalide",
            description=f"La mise doit √™tre comprise entre `1` et `{max_mise}` coins.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    # R√©cup√©ration ou initialisation des donn√©es de l'utilisateur
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data:
        data = {
            "guild_id": guild_id,
            "user_id": user_id,
            "wallet": 1500,
            "bank": 0
        }
        collection.insert_one(data)

    # V√©rification si l'utilisateur a assez de coins
    if data["wallet"] < mise:
        embed = discord.Embed(
            title="üí∏ Fonds insuffisants",
            description="Tu n'as pas assez de coins dans ton portefeuille pour cette mise.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    # Fonction pour tirer une carte
    def get_card():
        cartes = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        return random.choice(cartes)

    # Fonction pour calculer la valeur d'une main
    def get_value(main):
        value = 0
        aces = 0
        for carte in main:
            if carte in ['J', 'Q', 'K']:
                value += 10
            elif carte == 'A':
                aces += 1
                value += 11
            else:
                value += int(carte)
        while value > 21 and aces:
            value -= 10
            aces -= 1
        return value

    # Cr√©ation des mains initiales
    joueur = [get_card(), get_card()]
    croupier = [get_card(), get_card()]

    joueur_val = get_value(joueur)
    croupier_val = get_value(croupier)

    # Vue du Blackjack avec les boutons
    class BlackjackView(View):
        def __init__(self):
            super().__init__(timeout=60)  # 60 secondes pour jouer

        @discord.ui.button(label="üÉè Hit", style=discord.ButtonStyle.primary)
        async def hit(self, interaction: discord.Interaction, button: discord.ui.Button):
            nonlocal joueur, joueur_val
            carte = get_card()
            joueur.append(carte)
            joueur_val = get_value(joueur)

            embed = discord.Embed(
                title="üé∞ Blackjack",
                description=f"Tu as tir√© une carte : {carte}.",
                color=discord.Color.blue()
            )
            embed.add_field(name="üßë‚Äçüíº Ta main", value=f"`{'  '.join(joueur)}` ‚Üí **{joueur_val}**", inline=True)
            embed.add_field(name="üé≤ Croupier", value=f"`{'  '.join(croupier)}` ‚Üí **{croupier_val}**", inline=True)

            if joueur_val > 21:
                embed.add_field(name="üí• R√©sultat", value="Tu as d√©pass√© 21. Tu perds ta mise.", inline=False)
                collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"wallet": -mise}})
                # Log la perte
                await log_eco_channel(bot, guild_id, ctx.author, "Perte de mise", mise, data["wallet"], data["wallet"] - mise)
                self.stop()

            await interaction.response.edit_message(embed=embed, view=self)

        @discord.ui.button(label="‚úã Stand", style=discord.ButtonStyle.danger)
        async def stand(self, interaction: discord.Interaction, button: discord.ui.Button):
            nonlocal croupier, croupier_val
            # Le croupier joue apr√®s le joueur
            while croupier_val < 17:
                carte = get_card()
                croupier.append(carte)
                croupier_val = get_value(croupier)

            embed = discord.Embed(
                title="üé∞ Blackjack",
                description="Le croupier a fini de jouer.",
                color=discord.Color.green()
            )
            embed.add_field(name="üßë‚Äçüíº Ta main", value=f"`{'  '.join(joueur)}` ‚Üí **{joueur_val}**", inline=True)
            embed.add_field(name="üé≤ Croupier", value=f"`{'  '.join(croupier)}` ‚Üí **{croupier_val}**", inline=True)

            if croupier_val > 21 or joueur_val > croupier_val:
                embed.add_field(name="üí∞ R√©sultat", value="Tu gagnes ! Ta mise est doubl√©e.", inline=False)
                collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"wallet": mise}})
                # Log la victoire
                await log_eco_channel(bot, guild_id, ctx.author, "Gagn√© au Blackjack", mise, data["wallet"], data["wallet"] + mise)
            elif joueur_val < croupier_val:
                embed.add_field(name="üí• R√©sultat", value="Tu perds ta mise.", inline=False)
                collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"wallet": -mise}})
                # Log la perte
                await log_eco_channel(bot, guild_id, ctx.author, "Perte de mise", mise, data["wallet"], data["wallet"] - mise)
            else:
                embed.add_field(name="ü§ù R√©sultat", value="√âgalit√© ! Ta mise est rembours√©e.", inline=False)

            self.stop()

            await interaction.response.edit_message(embed=embed, view=self)

    # Envoi de l'embed initial avec les boutons
    view = BlackjackView()
    embed = discord.Embed(
        title="üé∞ Blackjack",
        description="Bienvenue dans le jeu de Blackjack ! Choisis `Hit` pour tirer une carte ou `Stand` pour rester.",
        color=discord.Color.blue()
    )
    embed.add_field(name="üßë‚Äçüíº Ta main", value=f"`{'  '.join(joueur)}` ‚Üí **{joueur_val}**", inline=True)
    embed.add_field(name="üé≤ Croupier", value=f"`{'  '.join(croupier[:1])}` ‚Üí **?**", inline=True)
    embed.add_field(name="üí∞ Mise", value=f"{mise} <:ecoEther:1341862366249357374>", inline=False)
    await ctx.send(embed=embed, view=view)

async def log_bj_max_mise(bot, guild_id, user, new_max_mise, old_max_mise):
    # R√©cup√©rer le canal de logs (peut √™tre configur√© dans la base de donn√©es)
    config = collection9.find_one({"guild_id": guild_id})
    channel_id = config.get("eco_log_channel") if config else None

    if not channel_id:
        return  # Aucun salon configur√©

    channel = bot.get_channel(channel_id)
    if not channel:
        return  # Salon introuvable (peut avoir √©t√© supprim√©)

    embed = discord.Embed(
        title="üÉè Log Blackjack - Mise maximale",
        color=discord.Color.gold(),
        timestamp=datetime.utcnow()
    )
    embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else None)
    embed.add_field(name="Action", value="Changement de la mise maximale", inline=False)
    embed.add_field(name="Ancienne Mise Maximale", value=f"{old_max_mise} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Nouvelle Mise Maximale", value=f"{new_max_mise} <:ecoEther:1341862366249357374>", inline=True)

    await channel.send(embed=embed)

@bot.command(name="bj-max-mise", aliases=["set-max-bj"])
@commands.has_permissions(administrator=True)  # La commande est r√©serv√©e aux admins
async def set_max_bj_mise(ctx, mise_max: int):
    # V√©rification que la mise max est un entier et sup√©rieure √† 0
    if not isinstance(mise_max, int) or mise_max <= 0:
        embed = discord.Embed(
            title="‚ùå Mise maximale invalide",
            description="La mise maximale doit √™tre un nombre entier positif.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    guild_id = ctx.guild.id

    # Charger les param√®tres de Blackjack depuis la collection info_bj
    bj_config = collection10.find_one({"guild_id": guild_id})

    # Si la configuration n'existe pas, en cr√©er une avec la mise max par d√©faut
    old_max_mise = 30000  # Valeur par d√©faut
    if bj_config:
        old_max_mise = bj_config.get("max_mise", 30000)

    # Mise √† jour de la mise maximale
    collection10.update_one(
        {"guild_id": guild_id},
        {"$set": {"max_mise": mise_max}},
        upsert=True
    )

    embed = discord.Embed(
        title="‚úÖ Mise maximale mise √† jour",
        description=f"La mise maximale pour le Blackjack a √©t√© chang√©e √† {mise_max} coins.",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

    # Log des changements
    await log_bj_max_mise(ctx.bot, guild_id, ctx.author, mise_max, old_max_mise)

# Gestion de l'erreur si l'utilisateur n'est pas administrateur
@set_max_bj_mise.error
async def set_max_bj_mise_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Acc√®s refus√©",
            description="Tu n'as pas les permissions n√©cessaires pour changer la mise maximale.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.hybrid_command(name="rob", description="Voler entre 1% et 50% du portefeuille d'un autre utilisateur.")
async def rob(ctx, user: discord.User):
    # R√©cup√©rer l'ID du serveur et l'utilisateur
    guild_id = ctx.guild.id
    user_id = ctx.author.id
    target_id = user.id

    # V√©rifier si l'utilisateur cible et l'attaquant sont diff√©rents
    if user_id == target_id:
        embed = discord.Embed(
            title="‚ùå Action interdite",
            description="Tu ne peux pas voler des coins √† toi-m√™me.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    # V√©rification du cooldown pour cette action
    cooldown_data = collection14.find_one({"guild_id": guild_id, "user_id": user_id, "target_id": target_id})
    if cooldown_data:
        last_rob_time = cooldown_data.get("last_rob", datetime.utcnow())
        if datetime.utcnow() - last_rob_time < timedelta(hours=1):
            remaining_time = (timedelta(hours=1) - (datetime.utcnow() - last_rob_time)).seconds
            embed = discord.Embed(
                title="‚ùå Cooldown en cours",
                description=f"Tu dois attendre encore **{remaining_time // 60} minutes** avant de pouvoir voler √† nouveau.",
                color=discord.Color.red()
            )
            return await ctx.send(embed=embed)

    # Chercher les donn√©es des utilisateurs
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    target_data = collection.find_one({"guild_id": guild_id, "user_id": target_id})

    # Si l'utilisateur ou la cible n'ont pas de donn√©es, initialiser les donn√©es
    if not user_data:
        user_data = {
            "guild_id": guild_id,
            "user_id": user_id,
            "wallet": 1500,
            "bank": 0
        }
        collection.insert_one(user_data)

    if not target_data:
        target_data = {
            "guild_id": guild_id,
            "user_id": target_id,
            "wallet": 1500,
            "bank": 0
        }
        collection.insert_one(target_data)

    # V√©rifier si la cible a des fonds disponibles
    target_wallet = target_data.get("wallet", 0)
    if target_wallet <= 0:
        embed = discord.Embed(
            title="‚ùå Solde insuffisant",
            description=f"**{user.display_name}**, la cible n'a pas de coins √† voler.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    # Calcul du montant √† voler entre 1% et 50%
    steal_percentage = random.randint(1, 50)
    amount_stolen = (steal_percentage / 100) * target_wallet

    # Mise √† jour des balances
    new_user_wallet = user_data["wallet"] + amount_stolen
    new_target_wallet = target_wallet - amount_stolen

    # Mise √† jour des donn√©es dans la base
    collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$set": {"wallet": new_user_wallet}})
    collection.update_one({"guild_id": guild_id, "user_id": target_id}, {"$set": {"wallet": new_target_wallet}})

    # Enregistrement de l'action dans la collection des CDs
    collection14.update_one(
        {"guild_id": guild_id, "user_id": user_id, "target_id": target_id},
        {"$set": {"last_rob": datetime.utcnow()}},
        upsert=True
    )

    # Log de l'action dans le salon appropri√©
    await log_eco_channel(bot, guild_id, ctx.author, "Vol", amount_stolen, user_data["wallet"], new_user_wallet, f"Vol√© √† {user.display_name}")

    # Cr√©ation de l'embed de r√©sultat
    embed = discord.Embed(
        title="üí∞ Vol r√©ussi !",
        description=f"**{user.display_name}** a vol√© **{amount_stolen:.2f} <:ecoEther:1341862366249357374>** de **{user.display_name}** !",
        color=discord.Color.green()
    )
    embed.add_field(name="Solde actuel", value=f"**{user.display_name}**: {new_user_wallet:.2f} <:ecoEther:1341862366249357374>\n**{user.display_name}**: {new_target_wallet:.2f} <:ecoEther:1341862366249357374>", inline=False)
    await ctx.send(embed=embed)

# Token pour d√©marrer le bot (√† partir des secrets)
# Lancer le bot avec ton token depuis l'environnement  
keep_alive()
bot.run(token)

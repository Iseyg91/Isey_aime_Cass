import discord
from discord.ext import commands, tasks
from discord import app_commands, Embed, ButtonStyle, ui
from discord.ui import Button, View, Select, Modal, TextInput, button
from discord.ui import Modal, TextInput, Button, View
from discord.utils import get
from discord import TextStyle
from functools import wraps
import os
from discord import app_commands, Interaction, TextChannel, Role
import io
import random
import asyncio
import time
import re
import subprocess
import sys
import math
import traceback
from keep_alive import keep_alive
from datetime import datetime, timedelta
from collections import defaultdict, deque
import pymongo
from pymongo import MongoClient
from motor.motor_asyncio import AsyncIOMotorClient
import psutil
import pytz
import platform
from discord.ui import Select, View

token = os.environ['ETHERYA']
intents = discord.Intents.all()
start_time = time.time()
bot = commands.Bot(command_prefix="!!", intents=intents, help_command=None)

#Configuration du Bot:
# --- ID Owner Bot ---
ISEY_ID = 792755123587645461
# D√©finir GUILD_ID
GUILD_ID = 1362462863293415604

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_DB")  # URI de connexion √† MongoDB
print("Mongo URI :", mongo_uri)  # Cela affichera l'URI de connexion (assure-toi de ne pas laisser cela en prod)
client = MongoClient(mongo_uri)
db = client['Cass-Eco2']

# Collections
collection = db['ether_eco']  #Stock les Bal
collection2 = db['ether_daily']  #Stock les cd de daily
collection3 = db['ether_slut']  #Stock les cd de slut
collection4 = db['ether_crime']  #Stock les cd de slut
collection5 = db['ether_collect'] #Stock les cd de collect
collection6 = db['ether_work'] #Stock les cd de Work
collection7 = db['ether_inventory'] #Stock les inventaires
collection8 = db['info_cf'] #Stock les Info du cf
collection9 = db['info_logs'] #Stock le Salon logs
collection10 = db['info_bj'] #Stock les Info du Bj
collection11 = db['info_rr'] #Stock les Info de RR
collection12 = db['info_roulette'] #Stock les Info de SM
collection13 = db['info_sm'] #Stock les Info de SM
collection14 = db['ether_rob'] #Stock les cd de Rob
collection15 = db['anti_rob'] #Stock les r√¥le anti-rob
collection16 = db['ether_boutique'] #Stock les Items dans la boutique
collection17 = db['joueur_ether_inventaire'] #Stock les items de joueurs
collection18 = db['ether_effects'] #Stock les effets
collection19 = db['ether_badge'] #Stock les bagde
collection20 = db['inventaire_badge'] #Stock les bagde des joueurs
collection21 = db['daily_badge'] #Stock les cd des daily badge
collection22 = db['start_date'] #Stock la date de commencemant des rewards
collection23 = db['joueur_rewards'] #Stock ou les joueurs sont

# Fonction pour v√©rifier si l'utilisateur poss√®de un item (fictif, √† adapter √† ta DB)
async def check_user_has_item(user: discord.Member, item_id: int):
    # Ici tu devras interroger la base de donn√©es MongoDB ou autre pour savoir si l'utilisateur poss√®de cet item
    # Par exemple:
    # result = collection.find_one({"user_id": user.id, "item_id": item_id})
    # return result is not None
    return True  # Pour l'exemple, on suppose que l'utilisateur a toujours l'item.

def get_cf_config(guild_id):
    config = collection8.find_one({"guild_id": guild_id})
    if not config:
        # Valeurs par d√©faut
        config = {
            "guild_id": guild_id,
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection8.insert_one(config)
    return config

async def log_eco_channel(bot, guild_id, user, action, amount, balance_before, balance_after, note=""):
    config = collection9.find_one({"guild_id": guild_id})
    channel_id = config.get("eco_log_channel") if config else None

    if not channel_id:
        return  # Aucun salon configur√©

    channel = bot.get_channel(channel_id)
    if not channel:
        return  # Salon introuvable (peut avoir √©t√© supprim√©)

    embed = discord.Embed(
        title="üí∏ Log √âconomique",
        color=discord.Color.gold(),
        timestamp=datetime.utcnow()
    )
    embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else None)
    embed.add_field(name="Action", value=action, inline=True)
    embed.add_field(name="Montant", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Solde", value=f"Avant: {balance_before}\nApr√®s: {balance_after}", inline=False)

    if note:
        embed.add_field(name="Note", value=note, inline=False)

    await channel.send(embed=embed)

def load_guild_settings(guild_id):
    # Charger les donn√©es de la collection principale
    ether_eco_data = collection.find_one({"guild_id": guild_id}) or {}
    ether_daily_data = collection2.find_one({"guild_id": guild_id}) or {}
    ether_slut_data = collection3.find_one({"guild_id": guild_id}) or {}
    ether_crime_data = collection4.find_one({"guild_id": guild_id}) or {}
    ether_collect = collection5.find_one({"guild_id": guild_id}) or {}
    ether_work_data = collection6.find_one({"guild_id": guild_id}) or {}
    ether_inventory_data = collection7.find_one({"guild_id": guild_id}) or {}
    info_cf_data = collection8.find_one({"guild_id": guild_id}) or {}
    info_logs_data = collection9.find_one({"guild_id": guild_id}) or {}
    info_bj_data = collection10.find_one({"guild_id": guild_id}) or {}
    info_rr_data = collection11.find_one({"guild_id": guild_id}) or {}
    info_roulette_data = collection12.find_one({"guild_id": guild_id}) or {}
    info_sm_roulette_data = collection13.find_one({"guild_id": guild_id}) or {}
    ether_rob_data = collection14.find_one({"guild_id": guild_id}) or {}
    anti_rob_data = collection15.find_one({"guild_id": guild_id}) or {}
    ether_boutique_data = collection16.find_one({"guild_id": guild_id}) or {}
    joueur_ether_inventaire_data = collection17.find_one({"guild_id": guild_id}) or {}
    ether_effects_data = collection18.find_one({"guild_id": guild_id}) or {}
    ether_badge_data = collection19.find_one({"guild_id": guild_id}) or {}
    inventaire_badge_data = collection20.find_one({"guild_id": guild_id}) or {}
    daily_badge_data = collection21.find_one({"guild_id": guild_id}) or {}
    start_date_data = collection22.find_one({"guild_id": guild_id}) or {}
    joueur_rewards_data = collection23.find_one({"guild_id": guild_id}) or {}

    # D√©bogage : Afficher les donn√©es de setup
    print(f"Setup data for guild {guild_id}: {setup_data}")

    combined_data = {
        "ether_eco": ether_eco_data,
        "ether_daily": ether_daily_data,
        "ether_slut": ether_slut_data,
        "ether_crime": ether_crime_data,
        "ether_collect": ether_collect_data,
        "ether_work": ether_work_data,
        "ether_inventory": ether_inventory_data,
        "info_cf": info_cf_data,
        "info_logs": info_logs_data,
        "info_bj": info_bj_data,
        "info_rr": info_rr_data,
        "info_roulette": info_roulette_data,
        "info_sm": info_sm_data,
        "ether_rob": ether_rob_data,
        "anti_rob": anti_rob_data,
        "ether_boutique": ether_boutique_data,
        "joueur_ether_inventaire": joueur_ether_inventaire_data,
        "ether_effects": ether_effects_data,
        "ether_badge": ether_badge_data,
        "inventaire_badge": inventaire_badge_data,
        "daily_badge": daily_badge_data,
        "start_date": start_date_data,
        "joueur_rewards": joueur_rewards_data
    }

    return combined_data

def get_or_create_user_data(guild_id: int, user_id: int):
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data:
        data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection.insert_one(data)
    return data

def insert_badge_into_db():
    # Ins√©rer les badges d√©finis dans la base de donn√©es MongoDB
    for badge in BADGES:
        # V√©rifier si le badge est d√©j√† pr√©sent
        if not collection19.find_one({"id": badge["id"]}):
            collection19.insert_one(badge)

# === UTILITAIRE POUR R√âCUP√âRER LA DATE DE D√âBUT ===
def get_start_date(guild_id):
    start_date_data = collection22.find_one({"guild_id": guild_id})
    if start_date_data:
        return datetime.fromisoformat(start_date_data["start_date"])
    return None

# === CONFIGURATION DES R√âCOMPENSES PAR JOUR ===
rewards = {
    1: {"coins": 1000, "badge": None, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.1.png?raw=true"},
    2: {"coins": 2000, "badge": None, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.2.png?raw=true"},
    3: {"coins": 3000, "badge": 2, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.3.png?raw=true"},
    4: {"coins": 4000, "badge": None, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.4.png?raw=true"},
    5: {"coins": 5000, "badge": None, "item": 1, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.5.png?raw=true"},
    6: {"coins": 6000, "badge": None, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.6.png?raw=true"},
    7: {"coins": 7000, "badge": 1, "item": None, "image_url": "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/IMAGE%20SEASON/image.7.png?raw=true"}
}

TOP_ROLES = {
    1: 1362832820417855699,  # ID du r√¥le Top 1
    2: 1362735276090327080,  # ID du r√¥le Top 2
    3: 1362832919789572178,  # ID du r√¥le Top 3
}

# Config des r√¥les
COLLECT_ROLES_CONFIG = [
    {
        "role_id": 1362836142902218812,  # √† remplacer
        "amount": 250,
        "cooldown": 3600,
        "auto": False
    }
]

# --- Boucle Auto Collect ---
@tasks.loop(seconds=60)
async def auto_collect_loop():
    for guild in bot.guilds:
        for member in guild.members:
            for config in COLLECT_ROLES_CONFIG:
                role = discord.utils.get(guild.roles, id=config["role_id"])
                if role in member.roles and config["auto"]:
                    now = datetime.utcnow()
                    cd_data = collection5.find_one({
                        "guild_id": guild.id,
                        "user_id": member.id,
                        "role_id": role.id
                    })
                    last_collect = cd_data.get("last_collect") if cd_data else None

                    if not last_collect or (now - last_collect).total_seconds() >= config["cooldown"]:
                        eco_data = collection.find_one({
                            "guild_id": guild.id,
                            "user_id": member.id
                        }) or {"guild_id": guild.id, "user_id": member.id, "cash": 1500, "bank": 0}

                        before = eco_data["cash"]
                        eco_data["cash"] += config["amount"]

                        collection.update_one(
                            {"guild_id": guild.id, "user_id": member.id},
                            {"$set": {"cash": eco_data["cash"]}},
                            upsert=True
                        )

                        collection5.update_one(
                            {"guild_id": guild.id, "user_id": member.id, "role_id": role.id},
                            {"$set": {"last_collect": now}},
                            upsert=True
                        )

                        after = eco_data["cash"]
                        await log_eco_channel(bot, guild.id, member, f"Auto Collect ({role.name})", config["amount"], before, after, note="Collect automatique")

# --- Boucle Top Roles ---
@tasks.loop(seconds=5)
async def update_top_roles():
    for guild in bot.guilds:
        all_users_data = list(collection.find({"guild_id": guild.id}))
        sorted_users = sorted(
            all_users_data,
            key=lambda u: u.get("cash", 0) + u.get("bank", 0),
            reverse=True
        )
        top_users = sorted_users[:3]

        for rank, user_data in enumerate(top_users, start=1):
            user_id = user_data["user_id"]
            role_id = TOP_ROLES[rank]
            role = discord.utils.get(guild.roles, id=role_id)
            if not role:
                print(f"R√¥le manquant : {role_id} dans {guild.name}")
                continue

            try:
                member = await guild.fetch_member(user_id)
            except discord.NotFound:
                print(f"Membre {user_id} non trouv√© dans {guild.name}")
                continue

            if role not in member.roles:
                await member.add_roles(role)
                print(f"Ajout√© {role.name} √† {member.display_name}")

        for rank, role_id in TOP_ROLES.items():
            role = discord.utils.get(guild.roles, id=role_id)
            if not role:
                continue
            for member in role.members:
                if member.id not in [u["user_id"] for u in top_users]:
                    await member.remove_roles(role)
                    print(f"Retir√© {role.name} de {member.display_name}")

# --- √âv√©nement on_ready ---
@bot.event
async def on_ready():
    print(f"{bot.user.name} est connect√©.")

    if not update_top_roles.is_running():
        update_top_roles.start()
    if not auto_collect_loop.is_running():
        auto_collect_loop.start()

    print(f"‚úÖ Le bot {bot.user} est maintenant connect√© ! (ID: {bot.user.id})")

    activity = discord.Activity(
        type=discord.ActivityType.streaming,
        name="Etherya",
        url="https://www.twitch.tv/tonstream"
    )
    await bot.change_presence(activity=activity, status=discord.Status.online)

    print(f"üéâ **{bot.user}** est maintenant connect√© et affiche son activit√© de stream avec succ√®s !")

    print("üìå Commandes disponibles üòä")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")

# --- Gestion globale des erreurs ---
@bot.event
async def on_error(event, *args, **kwargs):
    print(f"Une erreur s'est produite : {event}")
    embed = discord.Embed(
        title="‚ùó Erreur inattendue",
        description="Une erreur s'est produite lors de l'ex√©cution de la commande. Veuillez r√©essayer plus tard.",
        color=discord.Color.red()
    )
    try:
        await args[0].response.send_message(embed=embed)
    except Exception:
        pass

@bot.event
async def on_message(message):
    # Ignorer les messages du bot lui-m√™me
    if message.author.bot:
        return

    # Obtenir les informations de l'utilisateur
    user = message.author
    guild_id = message.guild.id
    user_id = user.id

    # G√©n√©rer un montant al√©atoire entre 5 et 20 coins
    coins_to_add = random.randint(5, 20)

    # Ajouter les coins au portefeuille de l'utilisateur
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"wallet": coins_to_add}},
        upsert=True
    )

    # Appeler le traitement habituel des commandes
    await bot.process_commands(message)

@bot.hybrid_command(
    name="uptime",
    description="Affiche l'uptime du bot."
)
async def uptime(ctx):
    uptime_seconds = round(time.time() - start_time)
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    embed = discord.Embed(
        title="Uptime du bot",
        description=f"Le bot est en ligne depuis : {days} jours, {hours} heures, {minutes} minutes, {seconds} secondes",
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

@bot.hybrid_command(
    name="ping",
    description="Affiche le Ping du bot."
)
async def ping(ctx):
    latency = round(bot.latency * 1000)  # Latence en ms
    embed = discord.Embed(title="Pong!", description=f"Latence: {latency}ms", color=discord.Color.green())

    await ctx.send(embed=embed)

# V√©rification si l'utilisateur est l'owner du bot
def is_owner(ctx):
    return ctx.author.id == ISEY_ID

@bot.hybrid_command()
async def shutdown(ctx):
    if is_owner(ctx):
        embed = discord.Embed(
            title="Arr√™t du Bot",
            description="Le bot va maintenant se fermer. Tous les services seront arr√™t√©s.",
            color=discord.Color.red()
        )
        embed.set_footer(text="Cette action est irr√©versible.")
        await ctx.send(embed=embed)
        await bot.close()
    else:
        await ctx.send("Seul l'owner peut arr√™ter le bot.")


@bot.hybrid_command( 
    name="balance",
    aliases=["bal", "money"],
    description="Affiche ta balance ou celle d'un autre utilisateur."
)
async def bal(ctx: commands.Context, user: discord.User = None):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")

    user = user or ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    def get_or_create_user_data(guild_id: int, user_id: int):
        data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
        if not data:
            data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
            collection.insert_one(data)
        return data

    data = get_or_create_user_data(guild_id, user_id)
    cash = data.get("cash", 0)
    bank = data.get("bank", 0)
    total = cash + bank

    # Classement des utilisateurs
    all_users_data = list(collection.find({"guild_id": guild_id}))
    sorted_users = sorted(
        all_users_data,
        key=lambda u: u.get("cash", 0) + u.get("bank", 0),
        reverse=True
    )
    rank = next((i + 1 for i, u in enumerate(sorted_users) if u["user_id"] == user_id), None)

    role_name = f"Tu as le r√¥le **[ùë∫◊•] Top {rank}** ! F√©licitations !" if rank in TOP_ROLES else None

    emoji_currency = "<:ecoEther:1341862366249357374>"

    def ordinal(n: int) -> str:
        return f"{n}{'st' if n == 1 else 'nd' if n == 2 else 'rd' if n == 3 else 'th'}"

    # Cr√©ation de l'embed
    embed = discord.Embed(color=discord.Color.blue())
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    # Ajout du champ classement seulement si rank existe
    if rank:
        embed.add_field(
            name="Leaderboard Rank",
            value=f"{ordinal(rank)}",
            inline=False
        )

    # Champ des finances (titre invisible)
    embed.add_field(
        name="Ton Solde:",
        value=(
            f"**Cash :** {cash:,} {emoji_currency}\n"
            f"**Banque :** {bank:,} {emoji_currency}\n"
            f"**Total :** {total:,} {emoji_currency}"
        ),
        inline=False
    )

    await ctx.send(embed=embed)

@bot.hybrid_command(name="deposit", aliases=["dep"], description="D√©pose de l'argent de ton portefeuille vers ta banque.")
@app_commands.describe(amount="Montant √† d√©poser (ou 'all')")
async def deposit(ctx: commands.Context, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    cash = data.get("cash", 0)
    bank = data.get("bank", 0)

    # Cas "all"
    if amount.lower() == "all":
        if cash == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as rien √† d√©poser.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)
        deposit_amount = cash

    else:
        if not amount.isdigit():
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, montant invalide. Utilise un nombre ou `all`.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        deposit_amount = int(amount)

        if deposit_amount <= 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu dois d√©poser un montant sup√©rieur √† z√©ro.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        if deposit_amount > cash:
            embed = discord.Embed(
                description=(
                    f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas assez de cash √† d√©poser. "
                    f"Tu as actuellement <:ecoEther:1341862366249357374> **{format(cash, ',')}** dans ton portefeuille."
                ),
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Mise √† jour des donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": -deposit_amount, "bank": deposit_amount}},
        upsert=True
    )

    # Embed de succ√®s
    embed = discord.Embed(
        description=f"<:Check:1362710665663615147> Tu as d√©pos√© <:ecoEther:1341862366249357374> **{format(deposit_amount, ',')}** dans ta banque !",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="withdraw", aliases=["with"], description="Retire de l'argent de ta banque vers ton portefeuille.")
async def withdraw(ctx: commands.Context, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Chercher les donn√©es actuelles
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}

    cash = data.get("cash", 0)
    bank = data.get("bank", 0)

    # G√©rer le cas "all"
    if amount.lower() == "all":
        if bank == 0:
            embed = discord.Embed(
                description="üí∏ Tu n'as rien √† retirer.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)
        withdrawn_amount = bank
    else:
        # V√©rifie que c'est un nombre valide
        if not amount.isdigit():
            embed = discord.Embed(
                description="‚ùå Montant invalide. Utilise un nombre ou `all`.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        withdrawn_amount = int(amount)

        if withdrawn_amount <= 0:
            embed = discord.Embed(
                description="‚ùå Tu dois retirer un montant sup√©rieur √† z√©ro.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        if withdrawn_amount > bank:
            embed = discord.Embed(
                description=(
                    f"<:classic_x_mark:1362711858829725729> Tu n'as pas autant √† retirer. "
                    f"Tu as actuellement <:ecoEther:1341862366249357374> **{format(bank, ',')}** dans ta banque."
                ),
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Mise √† jour dans la base de donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": withdrawn_amount, "bank": -withdrawn_amount}},
        upsert=True
    )

    # Cr√©ation de l'embed de succ√®s
    embed = discord.Embed(
        description=f"<:Check:1362710665663615147> Tu as retir√© <:ecoEther:1341862366249357374> **{format(withdrawn_amount, ',')}** de ta banque !",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="add-money", description="Ajoute de l'argent √† un utilisateur (r√©serv√© aux administrateurs).")
@app_commands.describe(
    user="L'utilisateur √† cr√©diter",
    amount="Le montant √† ajouter",
    location="Choisis entre cash ou bank"
)
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def add_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† 0.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    balance_before = data.get(field, 0)

    # Mise √† jour du solde
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {field: amount}},
        upsert=True
    )

    balance_after = balance_before + amount

    # Log dans le salon √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Ajout d'argent",
        amount,
        balance_before,
        balance_after,
        f"Ajout de {amount} <:ecoEther:1341862366249357374> dans le compte {field} de {user.mention} par {ctx.author.mention}."
    )

    # Embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Ajout effectu√© avec succ√®s !",
        description=f"**{amount} <:ecoEther:1341862366249357374>** ont √©t√© ajout√©s √† la **{field}** de {user.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@add_money.error
async def add_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("üö´ Tu n'as pas la permission d'utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue lors de l'ex√©cution de la commande.")

@bot.hybrid_command(name="remove-money", description="Retire de l'argent √† un utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† retirer", location="Choisis entre cash ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def remove_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† 0.")

    guild_id = ctx.guild.id
    user_id = user.id

    field = location.value

    # V√©rifie le solde actuel
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    current_balance = data.get(field, 0)

    if current_balance < amount:
        return await ctx.send(f"‚ùå {user.display_name} n'a pas assez de fonds dans son `{field}` pour retirer {amount} <:ecoEther:1341862366249357374>.")

    # Solde avant le retrait
    balance_before = current_balance

    # Mise √† jour dans la base de donn√©es
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {field: -amount}},
        upsert=True
    )

    # Solde apr√®s le retrait
    balance_after = balance_before - amount

    # Log dans le salon de logs √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Retrait d'argent",
        -amount,
        balance_before,
        balance_after,
        f"Retrait de {amount} <:ecoEther:1341862366249357374> dans le compte {field} de {user.mention} par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Retrait effectu√© avec succ√®s !",
        description=f"**{amount} <:ecoEther:1341862366249357374>** a √©t√© retir√© de la **{field}** de {user.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@remove_money.error
async def remove_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="set-money", description="D√©finit un montant exact dans le cash ou la bank d‚Äôun utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† d√©finir", location="Choisis entre cash ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def set_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount < 0:
        return await ctx.send("‚ùå Le montant ne peut pas √™tre n√©gatif.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel avant modification
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    balance_before = data.get(field, 0)

    # Mise √† jour de la base de donn√©es pour d√©finir le montant exact
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {field: amount}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "D√©finition du solde",
        amount - balance_before,  # Calcul du changement de solde
        balance_before,
        amount,
        f"Le solde du compte `{field}` de {user.mention} a √©t√© d√©fini √† {amount} <:ecoEther:1341862366249357374> par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed de confirmation avec le PP et le pseudo de l'utilisateur dans le titre
    embed = discord.Embed(
        title=f"{user.display_name} - {user.name}",  # Affiche le pseudo + PP
        description=f"Le montant de **{field}** de {user.mention} a √©t√© d√©fini √† **{amount} <:ecoEther:1341862366249357374>**.",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)  # PP + pseudo
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@set_money.error
async def set_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="pay", description="Paie un utilisateur avec tes coins.")
@app_commands.describe(user="L'utilisateur √† qui envoyer de l'argent", amount="Montant √† transf√©rer")
async def pay(ctx: commands.Context, user: discord.User, amount: int):
    sender = ctx.author
    guild_id = ctx.guild.id

    if user.id == sender.id:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {sender.mention}, tu ne peux pas te payer toi-m√™me.",
            color=discord.Color.red()
        )
        embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
        return await ctx.send(embed=embed)

    if amount <= 0:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {sender.mention}, le montant doit √™tre sup√©rieur √† z√©ro.",
            color=discord.Color.red()
        )
        embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
        return await ctx.send(embed=embed)

    sender_data = collection.find_one({"guild_id": guild_id, "user_id": sender.id}) or {"cash": 0}
    sender_cash = sender_data.get("cash", 0)

    if sender_cash < amount:
        embed = discord.Embed(
            description=(
                f"<:classic_x_mark:1362711858829725729> {sender.mention}, tu n'as pas assez de cash. "
                f"Tu as actuellement <:ecoEther:1341862366249357374> **{sender_cash}** dans ton portefeuille."
            ),
            color=discord.Color.red()
        )
        embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
        return await ctx.send(embed=embed)

    # Mise √† jour des soldes
    collection.update_one(
        {"guild_id": guild_id, "user_id": sender.id},
        {"$inc": {"cash": -amount}},
        upsert=True
    )

    collection.update_one(
        {"guild_id": guild_id, "user_id": user.id},
        {"$inc": {"cash": amount}},
        upsert=True
    )

    # Log dans le salon √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Paiement re√ßu",
        amount,
        None,
        None,
        f"{user.mention} a re√ßu **{amount} <:ecoEther:1341862366249357374>** de la part de {sender.mention}."
    )

    # Embed de succ√®s
    embed = discord.Embed(
        description=(
            f"<:Check:1362710665663615147> {user.mention} a re√ßu **{amount}** <:ecoEther:1341862366249357374> de ta part."
        ),
        color=discord.Color.green()
    )
    embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
    embed.set_footer(text=f"Paiement effectu√© √† {user.display_name}", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@pay.error
async def pay_error(ctx, error):
    embed = discord.Embed(
        description="<:classic_x_mark:1362711858829725729> Une erreur est survenue lors du paiement.",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

from datetime import datetime, timedelta
import random
import discord
from discord.ext import commands

@bot.hybrid_command(name="work", aliases=["wk"], description="Travaille et gagne de l'argent !")
async def work(ctx: commands.Context):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")
    
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id
    now = datetime.utcnow()

    # Cooldown check (collection6)
    cooldown_data = collection6.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_work_time = cooldown_data.get("last_work_time")

    if last_work_time:
        time_diff = now - last_work_time
        cooldown = timedelta(minutes=30)
        if time_diff < cooldown:
            remaining = cooldown - time_diff
            minutes_left = int(remaining.total_seconds() // 60)

            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu dois attendre **{minutes_left} minutes** avant de pouvoir retravailler.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Random amount (200 - 2000)
    amount = random.randint(100, 1000)

    # R√©cup√©ration ou cr√©ation des donn√©es d'utilisateur (collection √©conomie)
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection.insert_one(user_data)

    initial_cash = user_data.get("cash", 0)

    # Update cooldown
    collection6.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_work_time": now}},
        upsert=True
    )

    # Update balance (cash)
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": amount}},
        upsert=True
    )

    # Message dynamique
    messages = [
        f"Tu as travaill√© dur et gagn√© **{amount} <:ecoEther:1341862366249357374>**. Bien jou√© !",
        f"Bravo ! Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** apr√®s ton travail.",
        f"Tu as travaill√© avec assiduit√© et r√©colt√© **{amount} <:ecoEther:1341862366249357374>**.",
        f"Du bon travail ! Voici **{amount} <:ecoEther:1341862366249357374>** pour toi.",
        f"F√©licitations, tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** pour ton travail.",
        f"Tu as gagn√© **{amount} <:ecoEther:1341862366249357374>** apr√®s une journ√©e de travail bien remplie !",
        f"Bien jou√© ! **{amount} <:ecoEther:1341862366249357374>** ont √©t√© ajout√©s √† ta balance.",
        f"Voici ta r√©compense pour ton travail : **{amount} <:ecoEther:1341862366249357374>**.",
        f"Tu es pay√© pour ton dur labeur : **{amount} <:ecoEther:1341862366249357374>**.",
    ]
    message = random.choice(messages)

    # Log
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Travail effectu√©",
        amount,
        initial_cash,
        initial_cash + amount,
        f"{user.mention} a gagn√© **{amount} <:ecoEther:1341862366249357374>** pour son travail."
    )

    # Embed final
    embed = discord.Embed(
        description=message,
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
    embed.set_footer(text="Commande de travail", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@work.error
async def work_error(ctx, error):
    embed = discord.Embed(
        description="<:classic_x_mark:1362711858829725729> Une erreur est survenue lors de l'utilisation de la commande `work`.",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

@bot.hybrid_command(name="slut", description="Tente ta chance dans une aventure sexy pour gagner de l'argent... ou tout perdre.")
async def slut(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rif CD 30 min
    now = datetime.utcnow()
    cooldown_data = collection3.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_slut_time = cooldown_data.get("last_slut_time")

    if last_slut_time:
        time_diff = now - last_slut_time
        if time_diff < timedelta(minutes=30):
            remaining = timedelta(minutes=30) - time_diff
            minutes_left = int(remaining.total_seconds() // 60)
            return await ctx.send(f"<:classic_x_mark:1362711858829725729> Tu dois encore patienter **{minutes_left} minutes** avant de retenter une nouvelle aventure sexy.")

    # D√©terminer le gain ou perte
    outcome = random.choice(["gain", "loss"])
    amount = random.randint(100, 1000)

    # R√©cup√©rer solde
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    balance_before = user_data.get("cash", 0)

    if outcome == "gain":
        messages = [
            f"<:Check:1362710665663615147> Tu as s√©duit la bonne personne et re√ßu **{amount} <:ecoEther:1341862366249357374>** en cadeau.",
            f"<:Check:1362710665663615147> Une nuit torride t‚Äôa valu **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Tu as √©t√© pay√© pour tes charmes : **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Ta prestation a fait des ravages, tu gagnes **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Ce client g√©n√©reux t‚Äôa offert **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Tu as chauff√© la salle et r√©colt√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Tes talents ont √©t√© r√©compens√©s avec **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:Check:1362710665663615147> Tu as domin√© la sc√®ne, et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
        ]
        message = random.choice(messages)

        # Update balance
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": amount}},
            upsert=True
        )

        balance_after = balance_before + amount
        await log_eco_channel(bot, guild_id, user, "Gain apr√®s slut", amount, balance_before, balance_after)

    else:
        messages = [
            f"<:classic_x_mark:1362711858829725729> Ton plan a √©chou√©, tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:classic_x_mark:1362711858829725729> Ton client a disparu sans payer. Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:classic_x_mark:1362711858829725729> T‚Äôas gliss√© pendant ton show‚Ä¶ R√©sultat : **{amount} <:ecoEther:1341862366249357374>** de frais m√©dicaux.",
            f"<:classic_x_mark:1362711858829725729> Mauvais choix de client, il t‚Äôa vol√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:classic_x_mark:1362711858829725729> Une nuit sans succ√®s‚Ä¶ Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:classic_x_mark:1362711858829725729> Ton charme n‚Äôa pas op√©r√©‚Ä¶ Pertes : **{amount} <:ecoEther:1341862366249357374>**.",
            f"<:classic_x_mark:1362711858829725729> Tu as √©t√© arnaqu√© par un faux manager. Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
        ]
        message = random.choice(messages)

        # Update balance
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -amount}},
            upsert=True
        )

        balance_after = balance_before - amount
        await log_eco_channel(bot, guild_id, user, "Perte apr√®s slut", -amount, balance_before, balance_after)

    # Update CD
    collection3.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_slut_time": now}},
        upsert=True
    )

    # Embed r√©sultat
    embed = discord.Embed(
        title="üíã R√©sultat de ta prestation",
        description=message,
        color=discord.Color.purple() if outcome == "gain" else discord.Color.dark_red()
    )
    embed.set_footer(text=f"Aventure tent√©e par {user}", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@slut.error
async def slut_error(ctx, error):
    await ctx.send("<:classic_x_mark:1362711858829725729> Une erreur est survenue pendant la commande.")

@bot.hybrid_command(name="crime", description="Participe √† un crime pour essayer de gagner de l'argent, mais attention, tu pourrais perdre !")
async def crime(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rification du cooldown de 30 minutes
    now = datetime.utcnow()
    cooldown_data = collection4.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_crime_time = cooldown_data.get("last_crime_time")

    if last_crime_time:
        time_diff = now - last_crime_time
        if time_diff < timedelta(minutes=30):
            remaining = timedelta(minutes=30) - time_diff
            minutes_left = int(remaining.total_seconds() // 60)
            return await ctx.send(f"<:classic_x_mark:1362711858829725729> Tu dois attendre encore **{minutes_left} minutes** avant de pouvoir recommencer.")

    # Choisir entre gain ou perte
    outcome = random.choice(["gain", "loss"])
    amount = random.randint(100, 1000)

    # R√©cup√©rer le solde avant pour le log
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    balance_before = user_data.get("cash", 0)

    if outcome == "gain":
        messages = [
            f"Tu as braqu√© une banque sans te faire rep√©rer et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as vol√© une mallette pleine de billets ! Gain : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Un deal louche dans une ruelle t‚Äôa rapport√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as pirat√© un compte bancaire et r√©cup√©r√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Le cambriolage de la bijouterie a √©t√© un succ√®s ! Tu gagnes **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as r√©ussi √† duper la police et t‚Äô√©chapper avec **{amount} <:ecoEther:1341862366249357374>**.",
            f"Une vieille combine a encore fonctionn√© ! Tu r√©cup√®res **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as profit√© d‚Äôun chaos g√©n√©ral pour rafler **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton infiltration dans le casino a pay√© : **{amount} <:ecoEther:1341862366249357374>** gagn√©s.",
            f"Tu as corrompu un agent et il t‚Äôa laiss√© fuir avec **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton plan √©tait parfait. R√©sultat : **{amount} <:ecoEther:1341862366249357374>** dans ta poche.",
            f"Tu as vol√© une voiture de luxe et l‚Äôas revendue pour **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as escroqu√© un riche na√Øf. Jackpot : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Une magouille dans les march√©s noirs t‚Äôa rapport√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu t‚Äôes fait passer pour un faux agent et gagn√© **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton vol de donn√©es a √©t√© un franc succ√®s. R√©compense : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as d√©rob√© un coffre-fort entier. B√©n√©fice : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as braqu√© un fourgon blind√© et fuis avec **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton hacking dans une crypto-plateforme a pay√© : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as trouv√© un vieux magot cach√© par un ancien criminel. Tu gagnes **{amount} <:ecoEther:1341862366249357374>**.",
        ]
        message = random.choice(messages)

        # Mise √† jour du solde
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": amount}},
            upsert=True
        )

        balance_after = balance_before + amount
        await log_eco_channel(bot, guild_id, user, "Gain apr√®s crime", amount, balance_before, balance_after)

    else:
        messages = [
            f"Tu t‚Äôes fait attraper par la police et tu perds **{amount} <:ecoEther:1341862366249357374>** en caution.",
            f"Ton complice t‚Äôa trahi et s‚Äôest enfui avec **{amount} <:ecoEther:1341862366249357374>**.",
            f"Le coffre √©tait vide... Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Un pi√®ge t‚Äôattendait. Tu as √©t√© vol√© de **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu t‚Äôes bless√© pendant l‚Äôop√©ration. Les soins te co√ªtent **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton masque est tomb√©, tu as d√ª fuir et laiss√© **{amount} <:ecoEther:1341862366249357374>** derri√®re.",
            f"La police a saisi ton butin. Perte : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as √©t√© reconnu sur les cam√©ras et condamn√© √† une amende de **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton plan a √©t√© sabot√© par un rival. Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Une temp√™te a d√©truit ta planque, emportant **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as gliss√© pendant la fuite et tout perdu : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as √©t√© doubl√© par un hacker et perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"La victime t‚Äôa reconnu et a port√© plainte. Amende de **{amount} <:ecoEther:1341862366249357374>**.",
            f"Ton v√©hicule de fuite est tomb√© en panne. Tu as tout laiss√© derri√®re : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as √©t√© pris en flag. La ran√ßon te co√ªte **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu t‚Äôes fait arnaquer par un faux receleur. Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Un t√©moin t‚Äôa balanc√©. Tu payes **{amount} <:ecoEther:1341862366249357374>** pour te faire oublier.",
            f"La cachette d‚Äôargent a √©t√© d√©couverte. Tu perds **{amount} <:ecoEther:1341862366249357374>**.",
            f"Un garde t‚Äôa mis K.O. et t‚Äôa tout vol√© : **{amount} <:ecoEther:1341862366249357374>**.",
            f"Tu as confondu le b√¢timent... ce n'√©tait pas la bonne cible. Pertes : **{amount} <:ecoEther:1341862366249357374>**.",
        ]
        message = random.choice(messages)

        # Mise √† jour du solde
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -amount}},
            upsert=True
        )

        balance_after = balance_before - amount
        await log_eco_channel(bot, guild_id, user, "Perte apr√®s crime", -amount, balance_before, balance_after)

    # Mettre √† jour le cooldown
    collection4.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_crime_time": now}},
        upsert=True
    )

    # Embed final
    embed = discord.Embed(
        title="üí• R√©sultat de ton crime",
        description=message,
        color=discord.Color.red()
    )
    embed.set_footer(text=f"Action effectu√©e par {user}", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@crime.error
async def crime_error(ctx, error):
    await ctx.send("<:classic_x_mark:1362711858829725729> Une erreur est survenue lors de la commande.")


@bot.command(name="buy", aliases=["chicken", "c", "h", "i", "k", "e", "n"])
async def buy_item(ctx, item: str = "chicken"):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    item = "chicken"  # Forcer l'achat du chicken

    # V√©rifier si l'utilisateur poss√®de d√©j√† un chicken
    data = collection7.find_one({"guild_id": guild_id, "user_id": user_id})
    if data and data.get("chicken", False):
        embed = discord.Embed(
            description="<:classic_x_mark:1362711858829725729>  You already own a chicken.\nSend it off to fight using the command `cock-fight <bet>`",
            color=discord.Color.red()
        )
        embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
        await ctx.send(embed=embed)
        return

    # V√©rifier le solde (champ cash)
    balance_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("cash", 0) if balance_data else 0

    items_for_sale = {
        "chicken": 100,
    }

    if item in items_for_sale:
        price = items_for_sale[item]

        if balance >= price:
            # Retirer du cash
            collection.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$inc": {"cash": -price}},
                upsert=True
            )

            # Ajouter le chicken
            collection7.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$set": {item: True}},
                upsert=True
            )

            # Logs √©conomiques
            balance_after = balance - price
            await log_eco_channel(
                bot, guild_id, user, "Achat", price, balance, balance_after,
                f"Achat d'un **{item}**"
            )

            # Embed de confirmation
            embed = discord.Embed(
                description="<:Check:1362710665663615147> You have bought a chicken to fight!\nUse the command `cock-fight <bet>`",
                color=discord.Color.green()
            )
            embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
            await ctx.send(embed=embed)

        else:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> You don't have enough coins to buy a **{item}**!",
                color=discord.Color.red()
            )
            embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
            await ctx.send(embed=embed)

    else:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> This item is not available for purchase.",
            color=discord.Color.red()
        )
        embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
        await ctx.send(embed=embed)

@bot.command(name="cock-fight", aliases=["cf"])
async def cock_fight(ctx, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    config = get_cf_config(guild_id)
    max_bet = config.get("max_bet", 20000)
    max_chance = config.get("max_chance", 100)
    start_chance = config.get("start_chance", 50)

    data = collection7.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data or not data.get("chicken", False):
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas de poulet ! Utilise la commande `!!buy chicken` pour en acheter un.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    balance_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("cash", 0) if balance_data else 0

    if amount.lower() == "all":
        if balance == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton cash est vide.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        if balance > max_bet:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ta mise d√©passe la limite de **{max_bet} <:ecoEther:1341862366249357374>**.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        amount = balance

    elif amount.lower() == "half":
        if balance == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton cash est vide.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        amount = balance // 2
        if amount > max_bet:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la moiti√© de ton cash d√©passe la limite de **{max_bet} <:ecoEther:1341862366249357374>**.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

    else:
        try:
            amount = int(amount)
        except ValueError:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, entre un montant valide, ou utilise `all` ou `half`.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

    if amount > balance:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas assez de cash pour cette mise.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    if amount <= 0:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la mise doit √™tre positive.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    if amount > max_bet:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la mise est limit√©e √† **{max_bet} <:ecoEther:1341862366249357374>**.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    win_data = collection6.find_one({"guild_id": guild_id, "user_id": user_id})
    win_chance = win_data.get("win_chance") if win_data and "win_chance" in win_data else start_chance

    if random.randint(1, 100) <= win_chance:
        win_amount = amount
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": win_amount}},
            upsert=True
        )
        new_chance = min(win_chance + 1, max_chance)
        collection6.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"win_chance": new_chance}},
            upsert=True
        )

        embed = discord.Embed(
            description=f"<:Check:1362710665663615147> {user.mention}, ton poulet a **gagn√©** le combat et t‚Äôa rapport√© <:ecoEther:1341862366249357374> **{win_amount}** ! üêì",
            color=discord.Color.green()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text=f"Chicken strength (chance of winning): {new_chance}%")
        await ctx.send(embed=embed)

        balance_after = balance + win_amount
        await log_eco_channel(
            bot, guild_id, user, "Victoire au Cock-Fight", win_amount, balance, balance_after,
            f"Victoire au Cock-Fight avec un gain de **{win_amount}**"
        )

    else:
        collection7.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"chicken": False}}
        )
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -amount}},
            upsert=True
        )
        collection6.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"win_chance": start_chance}},
            upsert=True
        )

        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton poulet est **mort** au combat... <:imageremovebgpreview53:1362693948702855360>",
            color=discord.Color.red()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        await ctx.send(embed=embed)

        balance_after = balance - amount
        await log_eco_channel(
            bot, guild_id, user, "D√©faite au Cock-Fight", -amount, balance, balance_after,
            f"D√©faite au Cock-Fight avec une perte de **{amount}**"
        )

@bot.command(name="set-cf-depart-chance")
@commands.has_permissions(administrator=True)
async def set_depart_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-depart-chance 50`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"start_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance de d√©part", inline=True)
            embed.add_field(name="Chance de d√©part", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance de d√©part a √©t√© mise √† **{pourcent}%**.")


@bot.command(name="set-cf-max-chance")
@commands.has_permissions(administrator=True)
async def set_max_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-max-chance 90`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance maximale de victoire", inline=True)
            embed.add_field(name="Chance maximale", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance maximale de victoire est maintenant de **{pourcent}%**.")

@bot.command(name="set-cf-mise-max")
@commands.has_permissions(administrator=True)
async def set_max_mise(ctx, amount: str = None):
    if amount is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier une mise maximale (nombre entier positif). Exemple : `!set-cf-mise-max 1000`")

    if not amount.isdigit():
        return await ctx.send("‚ö†Ô∏è La mise maximale doit √™tre un **nombre entier**.")

    amount = int(amount)
    if amount <= 0:
        return await ctx.send("‚ùå La mise maximale doit √™tre un **nombre sup√©rieur √† 0**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle mise maximale
    collection8.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_bet": amount}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection9.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la mise maximale", inline=True)
            embed.add_field(name="Mise maximale", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La mise maximale a √©t√© mise √† **{amount} <:ecoEther:1341862366249357374>**.")

# Gestion des erreurs li√©es aux permissions
@set_depart_chance.error
@set_max_chance.error
@set_max_mise.error
async def cf_config_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
    elif isinstance(error, commands.CommandInvokeError):
        await ctx.send("‚ùå Une erreur est survenue lors de l‚Äôex√©cution de la commande.")
        print(f"[ERREUR] {error}")
    else:
        await ctx.send("‚ö†Ô∏è Une erreur inconnue est survenue.")
        print(f"[ERREUR INCONNUE] {error}")

class CFConfigView(ui.View):
    def __init__(self, guild_id):
        super().__init__(timeout=60)
        self.guild_id = guild_id

    @ui.button(label="üîÑ Reset aux valeurs par d√©faut", style=discord.ButtonStyle.red)
    async def reset_defaults(self, interaction: Interaction, button: ui.Button):
        # V√©rifier si l'utilisateur est admin
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("Tu n'as pas la permission de faire √ßa.", ephemeral=True)
            return

        # Reset config
        default_config = {
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection8.update_one(
            {"guild_id": self.guild_id},
            {"$set": default_config},
            upsert=True
        )
        await interaction.response.send_message("‚úÖ Les valeurs par d√©faut ont √©t√© r√©tablies.", ephemeral=True)

@bot.command(name="cf-config")
@commands.has_permissions(administrator=True)
async def cf_config(ctx):
    guild_id = ctx.guild.id
    config = get_cf_config(guild_id)

    start_chance = config.get("start_chance", 50)
    max_chance = config.get("max_chance", 100)
    max_bet = config.get("max_bet", 20000)

    embed = discord.Embed(
        title="‚öôÔ∏è Configuration Cock-Fight",
        color=discord.Color.gold()
    )
    embed.add_field(name="üéØ Chance de d√©part", value=f"**{start_chance}%**", inline=False)
    embed.add_field(name="üìà Chance max", value=f"**{max_chance}%**", inline=False)
    embed.add_field(name="üí∞ Mise maximale", value=f"**{max_bet} <:ecoEther:1341862366249357374>**", inline=False)
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed, view=CFConfigView(guild_id))

@bot.command(name="set-eco-log")
@commands.has_permissions(administrator=True)
async def set_eco_log(ctx, channel: discord.TextChannel):
    guild_id = ctx.guild.id
    collection9.update_one(
        {"guild_id": guild_id},
        {"$set": {"eco_log_channel": channel.id}},
        upsert=True
    )
    await ctx.send(f"‚úÖ Les logs √©conomiques seront envoy√©s dans {channel.mention}")

# Fonction pour r√©cup√©rer ou cr√©er les donn√©es utilisateur
def get_or_create_user_data(guild_id: int, user_id: int):
    data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data:
        data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection.insert_one(data)
    return data

# Valeur des cartes
card_values = {
    'A': 11,
    '2': 2, '3': 3, '4': 4, '5': 5,
    '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10
}

# √âMOJIS DE CARTES
card_emojis = {
    'A': ['<:ACarreauRouge:1362752186291060928>', '<:APiqueNoir:1362752281363087380>', '<:ACoeurRouge:1362752392508084264>', '<:ATrefleNoir:1362752416046518302>'],
    '2': ['<:2CarreauRouge:1362752434677743767>', '<:2PiqueNoir:1362752455082901634>', '<:2CoeurRouge:1362752473852547082>', '<:2TrefleNoir:1362752504097406996>'],
    '3': ['<:3CarreauRouge:1362752551065358459>', '<:3PiqueNoir:1362752595269255248>', '<:3CoeurRouge:1362752651565207562>', '<:3TrefleNoir:1362752672922603681>'],
    '4': ['<:4CarreauRouge:1362752709412917460>', '<:4PiqueNoir:1362752726592917555>', '<:4CoeurRouge:1362752744405991555>', '<:4TrefleNoir:1362752764924530848>'],
    '5': ['<:5CarreauRouge:1362752783316549743>', '<:5PiqueNoir:1362752806368313484>', '<:5CoeurRouge:1362752826123485205>', '<:5TrefleNoir:1362752846889615470>'],
    '6': ['<:6CarreauRouge:1362752972831850626>', '<:6PiqueNoir:1362752993203847409>', '<:6CoeurRouge:1362753014921953362>', '<:6TrefleNoir:1362753036404916364>'],
    '7': ['<:7CarreauRouge:1362753062392823809>', '<:7PiqueNoir:1362753089547010219>', '<:7CoeurRouge:1362753147407433789>', '<:7TrefleNoir:1362753178403209286>'],
    '8': ['<:8CarreauRouge:1362753220665151620>', '<:8PiqueNoir:1362753245675524177>', '<:8CoeurRouge:1362753270065528944>', '<:8TrefleNoir:1362753296552689824>'],
    '9': ['<:9CarreauRouge:1362753331507892306>', '<:9PiqueNoir:1362753352903036978>', '<:9CoeurRouge:1362753387514429540>', '<:9TrefleNoir:1362753435153469673>'],
    '10': ['<:10CarreauRouge:1362753459505594390>', '<:10PiqueNoir:1362753483429646529>', '<:10CoeurRouge:1362753511263047731>', '<:10TrefleNoir:1362753534621122744>'],
    'J': ['<:JValetCarreau:1362753572495822938>', '<:JValetPique:1362753599771246624>', '<:JValetCoeur:1362753627340537978>', '<:JValetTrefle:1362753657753309294>'],
    'Q': ['<:QReineCarreau:1362754443543711744>', '<:QReinePique:1362754468390764576>', '<:QReineCoeur:1362754488909299772>', '<:QReineTrefle:1362754507422830714>'],
    'K': ['<:KRoiCarreau:1362753685095976981>', '<:KRoiPique:1362753958350946385>', '<:KRoiCoeur:1362754291223498782>', '<:KRoiTrefle:1362754318276497609>']
}

# Fonction pour tirer une carte
def draw_card():
    value = random.choice(list(card_values.keys()))
    emoji = random.choice(card_emojis.get(value, ['üÉè']))
    return value, emoji

# Calcul de la valeur totale d'une main
def calculate_hand_value(hand):
    total = 0
    aces = 0
    for card in hand:
        if card == 'A':
            aces += 1
        total += card_values[card]
    while total > 21 and aces:
        total -= 10
        aces -= 1
    return total

class BlackjackView(discord.ui.View):
    def __init__(self, ctx, player_hand, dealer_hand, bet, player_data, max_bet):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.player_hand = player_hand
        self.dealer_hand = dealer_hand
        self.bet = bet
        self.player_data = player_data
        self.guild_id = ctx.guild.id
        self.user_id = ctx.author.id
        self.max_bet = max_bet

    async def interaction_check(self, interaction: discord.Interaction):
        return interaction.user.id == self.ctx.author.id

    @discord.ui.button(label="Hit", style=discord.ButtonStyle.green, emoji="‚ûï")
    async def hit(self, interaction: discord.Interaction, button: discord.ui.Button):
        value, _ = draw_card()
        self.player_hand.append(value)
        player_total = calculate_hand_value(self.player_hand)

        if player_total > 21:
            await self.end_game(interaction, "lose")
        else:
            embed = discord.Embed(title="üÉè Blackjack", color=discord.Color.blue())  # Couleur bleue pendant le jeu
            embed.add_field(name="üßë Ta main", value=" ".join([card_emojis[c][0] for c in self.player_hand]) + f"\n**Total : {player_total}**", inline=False)
            embed.add_field(name="ü§ñ Main du croupier", value=card_emojis[self.dealer_hand[0]][0] + " üÇ†", inline=False)
            embed.add_field(name="üí∞ Mise", value=f"{self.bet} <:ecoEther:1341862366249357374>", inline=False)
            await interaction.response.edit_message(embed=embed, view=self)


    @discord.ui.button(label="Stand", style=discord.ButtonStyle.blurple, emoji="üõë")
    async def stand(self, interaction: discord.Interaction, button: discord.ui.Button):
        while calculate_hand_value(self.dealer_hand) < 17:
            value, _ = draw_card()
            self.dealer_hand.append(value)

        player_total = calculate_hand_value(self.player_hand)
        dealer_total = calculate_hand_value(self.dealer_hand)

        if dealer_total > 21 or player_total > dealer_total:
            await self.end_game(interaction, "win")
        elif player_total == dealer_total:
            await self.end_game(interaction, "draw")
        else:
            await self.end_game(interaction, "lose")

    async def end_game(self, interaction: discord.Interaction, result: str):
        player_total = calculate_hand_value(self.player_hand)
        dealer_total = calculate_hand_value(self.dealer_hand)

        if result == "win":
            self.player_data["cash"] += self.bet * 2
            message = f"<:Check:1362710665663615147> Tu as **gagn√©** !"
            color = discord.Color.green()
        elif result == "draw":
            self.player_data["cash"] += self.bet
            message = f"<:Check:1362710665663615147> √âgalit√© !"
            color = discord.Color.gold()
        else:
            message = f"<:classic_x_mark:1362711858829725729> Tu as **perdu**..."
            color = discord.Color.red()

        # Mise √† jour dans la DB
        collection.update_one(
            {"guild_id": self.guild_id, "user_id": self.user_id},
            {"$set": {"cash": self.player_data["cash"]}}
        )

        embed = discord.Embed(title="üÉè R√©sultat du Blackjack", color=color)
        embed.add_field(name="üßë Ta main", value=" ".join([card_emojis[c][0] for c in self.player_hand]) + f"\n**Total : {player_total}**", inline=False)
        embed.add_field(name="ü§ñ Main du croupier", value=" ".join([card_emojis[c][0] for c in self.dealer_hand]) + f"\n**Total : {dealer_total}**", inline=False)
        embed.add_field(name="üí∞ Mise", value=f"{self.bet} <:ecoEther:1341862366249357374>", inline=False)
        embed.add_field(name="R√©sultat", value=message, inline=False)

        await interaction.response.edit_message(embed=embed, view=None)

# Lorsqu'un joueur joue au blackjack
@bot.hybrid_command(name="blackjack", aliases=["bj"], description="Joue au blackjack et tente de gagner !")
async def blackjack(ctx: commands.Context, mise: str = None):
    if ctx.guild is None:
        return await ctx.send(embed=discord.Embed(description="Cette commande ne peut √™tre utilis√©e qu'en serveur.", color=discord.Color.red()))

    if mise == "all":
        user_data = get_or_create_user_data(ctx.guild.id, ctx.author.id)
        max_bet = 15000  # La mise maximale

        if user_data["cash"] <= max_bet:
            mise = user_data["cash"]  # Mise toute la somme disponible
        else:
            return await ctx.send(embed=discord.Embed(description=f"Ton solde est trop √©lev√© pour miser tout, la mise maximale est de {max_bet} <:ecoEther:1341862366249357374>.", color=discord.Color.red()))

    elif mise == "half":
        user_data = get_or_create_user_data(ctx.guild.id, ctx.author.id)
        max_bet = 15000  # La mise maximale
        half_cash = user_data["cash"] // 2

        if half_cash > max_bet:
            return await ctx.send(embed=discord.Embed(description=f"La moiti√© de ton solde est trop √©lev√©e, la mise maximale est de {max_bet} <:ecoEther:1341862366249357374>.", color=discord.Color.red()))
        else:
            mise = half_cash

    elif mise:
        mise = int(mise)
        user_data = get_or_create_user_data(ctx.guild.id, ctx.author.id)
        max_bet = 15000  # La mise maximale

        if mise <= 0:
            return await ctx.send(embed=discord.Embed(description="Tu dois miser une somme sup√©rieure √† 0.", color=discord.Color.red()))
        if mise > max_bet:
            return await ctx.send(embed=discord.Embed(description=f"La mise maximale est de {max_bet} <:ecoEther:1341862366249357374>.", color=discord.Color.red()))
        if user_data["cash"] < mise:
            return await ctx.send(embed=discord.Embed(description="Tu n'as pas assez d'argent pour miser cette somme.", color=discord.Color.red()))
    
    if mise is None:
        return await ctx.send(embed=discord.Embed(description="Tu dois sp√©cifier une mise, ou utiliser `all` ou `half` pour miser tout ou la moiti√© de ton solde.", color=discord.Color.red()))

    user_data["cash"] -= mise
    collection.update_one(
        {"guild_id": ctx.guild.id, "user_id": ctx.author.id},
        {"$set": {"cash": user_data["cash"]}}
    )

    player_hand = [draw_card()[0] for _ in range(2)]
    dealer_hand = [draw_card()[0] for _ in range(2)]

    embed = discord.Embed(title="üÉè Blackjack", color=discord.Color.blue())
    embed.add_field(name="üßë Ta main", value=" ".join([card_emojis[c][0] for c in player_hand]) + f"\n**Total : {calculate_hand_value(player_hand)}**", inline=False)
    embed.add_field(name="ü§ñ Main du croupier", value=card_emojis[dealer_hand[0]][0] + " üÇ†", inline=False)
    await ctx.send(embed=embed, view=BlackjackView(ctx, player_hand, dealer_hand, mise, user_data, max_bet))

@bot.command(name="bj-max-mise", aliases=["set-max-bj"])
@commands.has_permissions(administrator=True)  # La commande est r√©serv√©e aux admins
async def set_max_bj_mise(ctx, mise_max: int):
    # V√©rification que la mise max est un entier et sup√©rieure √† 0
    if not isinstance(mise_max, int) or mise_max <= 0:
        embed = discord.Embed(
            title="‚ùå Mise maximale invalide",
            description="La mise maximale doit √™tre un nombre entier positif.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    guild_id = ctx.guild.id

    # Charger les param√®tres de Blackjack depuis la collection info_bj
    bj_config = collection10.find_one({"guild_id": guild_id})

    # Si la configuration n'existe pas, en cr√©er une avec la mise max par d√©faut
    old_max_mise = 30000  # Valeur par d√©faut
    if bj_config:
        old_max_mise = bj_config.get("max_mise", 30000)

    # Mise √† jour de la mise maximale
    collection10.update_one(
        {"guild_id": guild_id},
        {"$set": {"max_mise": mise_max}},
        upsert=True
    )

    embed = discord.Embed(
        title="‚úÖ Mise maximale mise √† jour",
        description=f"La mise maximale pour le Blackjack a √©t√© chang√©e √† {mise_max} coins.",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

    # Log des changements
    await log_bj_max_mise(ctx.bot, guild_id, ctx.author, mise_max, old_max_mise)

# Gestion de l'erreur si l'utilisateur n'est pas administrateur
@set_max_bj_mise.error
async def set_max_bj_mise_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Acc√®s refus√©",
            description="Tu n'as pas les permissions n√©cessaires pour changer la mise maximale.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

from datetime import datetime, timedelta

@bot.hybrid_command(name="rob", description="Voler entre 1% et 50% du portefeuille d'un autre utilisateur.")
async def rob(ctx, user: discord.User):
    guild_id = ctx.guild.id
    user_id = ctx.author.id
    target_id = user.id

    # V√©rifier si la cible est un bot
    if user.bot:
        embed = discord.Embed(
            description="Tu ne peux pas voler un bot.",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # Emp√™cher de se voler soi-m√™me
    if user_id == target_id:
        embed = discord.Embed(
            description="Tu ne peux pas voler des coins √† toi-m√™me.",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # V√©rifier le cooldown
    last_rob = collection14.find_one({"guild_id": guild_id, "user_id": user_id})
    if last_rob:
        last_rob_time = last_rob.get("last_rob")
        if last_rob_time:
            cooldown_time = timedelta(hours=1)
            time_left = last_rob_time + cooldown_time - datetime.utcnow()
            if time_left > timedelta(0):
                total_seconds = int(time_left.total_seconds())
                minutes, seconds = divmod(total_seconds, 60)
                hours, minutes = divmod(minutes, 60)
                time_str = f"{hours}h {minutes}min" if hours else f"{minutes}min"

                embed = discord.Embed(
                    description=f"Tu dois attendre encore **{time_str}** avant de pouvoir voler √† nouveau.",
                    color=discord.Color.red()
                )
                embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
                return await ctx.send(embed=embed)

    # V√©rifier si la cible existe dans le serveur
    target_member = ctx.guild.get_member(target_id)
    if not target_member:
        embed = discord.Embed(
            description=f"Impossible de trouver {user.display_name} sur ce serveur.",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # V√©rifier les r√¥les anti-rob
    anti_rob_data = collection15.find_one({"guild_id": guild_id}) or {"roles": []}
    target_roles = [role.name for role in target_member.roles]
    if any(role in anti_rob_data["roles"] for role in target_roles):
        embed = discord.Embed(
            description=f"Tu ne peux pas voler {user.display_name} car il a un r√¥le prot√©g√©.",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # R√©cup√©rer les donn√©es des deux utilisateurs
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id}) or {"wallet": 1500, "bank": 0}
    target_data = collection.find_one({"guild_id": guild_id, "user_id": target_id}) or {"wallet": 1500, "bank": 0}
    collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$setOnInsert": user_data}, upsert=True)
    collection.update_one({"guild_id": guild_id, "user_id": target_id}, {"$setOnInsert": target_data}, upsert=True)

    target_wallet = target_data["wallet"]
    if target_wallet <= 0:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> Tu as tent√© de voler {user.display_name}, mais il n‚Äôa pas d‚Äôargent liquide.",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # Calcul de la probabilit√© de succ√®s bas√©e sur la richesse du voleur
    robber_total = user_data["wallet"] + user_data["bank"]
    rob_chance = max(80 - (robber_total // 1000), 10)  # max 80%, min 10%
    success = random.randint(1, 100) <= rob_chance

    if success:
        steal_percentage = random.randint(1, 50)
        amount_stolen = (steal_percentage / 100) * target_wallet
        amount_stolen = min(amount_stolen, target_wallet)

        new_user_wallet = user_data["wallet"] + amount_stolen
        new_target_wallet = target_wallet - amount_stolen

        collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$set": {"wallet": new_user_wallet}})
        collection.update_one({"guild_id": guild_id, "user_id": target_id}, {"$set": {"wallet": new_target_wallet}})

        collection14.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"last_rob": datetime.utcnow()}},
            upsert=True
        )

        await log_eco_channel(bot, guild_id, ctx.author, "Vol", amount_stolen, user_data["wallet"], new_user_wallet, f"Vol√© √† {user.display_name}")

        embed = discord.Embed(
            description=f"<:Check:1362710665663615147> Tu as vol√© <:ecoEther:1341862366249357374> **{amount_stolen:.2f}** √† **{user.display_name}**",
            color=discord.Color.green()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    else:
        loss_percentage = random.uniform(1, 5)
        loss_amount = (loss_percentage / 100) * user_data["wallet"]
        loss_amount = min(loss_amount, user_data["wallet"])

        new_user_wallet = user_data["wallet"] - loss_amount
        collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$set": {"wallet": new_user_wallet}})

        collection14.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"last_rob": datetime.utcnow()}},
            upsert=True
        )

        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> Tu as √©t√© attrap√© en tentant de voler {user.display_name}, tu perds <:ecoEther:1341862366249357374> **{loss_amount:.2f}** !",
            color=discord.Color.red()
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

@bot.command(name="set-anti_rob")
async def set_anti_rob(ctx):
    if not ctx.author.guild_permissions.administrator:
        return await ctx.send(embed=discord.Embed(
            description="Tu n'as pas la permission d'ex√©cuter cette commande.",
            color=discord.Color.red()
        ))

    guild_id = ctx.guild.id
    data = collection15.find_one({"guild_id": guild_id}) or {"guild_id": guild_id, "roles": []}
    anti_rob_roles = data["roles"]

    embed = discord.Embed(
        title="Gestion des r√¥les anti-rob",
        description=f"**R√¥les actuellement prot√©g√©s :**\n{', '.join(anti_rob_roles) if anti_rob_roles else 'Aucun'}\n\nS√©lectionne les r√¥les √† ajouter/enlever de l‚Äôanti-rob.",
        color=discord.Color.blurple()
    )

    class AntiRobSelect(Select):
        def __init__(self):
            options = [
                discord.SelectOption(label=role.name, value=str(role.id), default=(role.name in anti_rob_roles))
                for role in ctx.guild.roles
                if role != ctx.guild.default_role and not role.managed
            ][:25]  # Discord limite √† 25 options

            super().__init__(
                placeholder="Choisis les r√¥les √† ajouter ou retirer",
                min_values=1,
                max_values=len(options),
                options=options
            )

        async def callback(self, interaction: discord.Interaction):
            if interaction.user != ctx.author:
                return await interaction.response.send_message("Cette interaction ne t'est pas destin√©e.", ephemeral=True)

            changes = []
            for role_id in self.values:
                role = discord.utils.get(ctx.guild.roles, id=int(role_id))
                if role.name in anti_rob_roles:
                    anti_rob_roles.remove(role.name)
                    changes.append(f"‚ûñ {role.name}")
                else:
                    anti_rob_roles.append(role.name)
                    changes.append(f"‚ûï {role.name}")

            # Mise √† jour BDD
            collection15.update_one({"guild_id": guild_id}, {"$set": {"roles": anti_rob_roles}}, upsert=True)

            # Feedback
            await interaction.response.edit_message(embed=discord.Embed(
                title="‚úÖ Mise √† jour des r√¥les anti-rob",
                description="\n".join(changes) + f"\n\n**R√¥les prot√©g√©s actuels :**\n{', '.join(anti_rob_roles) if anti_rob_roles else 'Aucun'}",
                color=discord.Color.green()
            ), view=None)

    view = View()
    view.add_item(AntiRobSelect())
    await ctx.send(embed=embed, view=view)

@bot.hybrid_command(
    name="set-rr-limite",
    description="Fixe une limite de mise pour la roulette russe. (Admin seulement)"
)
@commands.has_permissions(administrator=True)  # Permet uniquement aux admins de modifier la limite
async def set_rr_limite(ctx: commands.Context, limite: int):
    if limite <= 0:
        return await ctx.send("La limite de mise doit √™tre un nombre positif.")
    
    guild_id = ctx.guild.id

    # Mettre √† jour la limite dans la collection info_rr
    collection11.update_one(
        {"guild_id": guild_id},
        {"$set": {"rr_limite": limite}},
        upsert=True  # Si la donn√©e n'existe pas, elle sera cr√©√©e
    )

    await ctx.send(f"La limite de mise pour la roulette russe a √©t√© fix√©e √† {limite:,} coins.")

active_rr_games = {}

@bot.command(aliases=["rr"])
async def russianroulette(ctx, arg: str):
    guild_id = ctx.guild.id
    user = ctx.author

    # Fonction pour r√©cup√©rer le cash
    def get_user_cash(guild_id: int, user_id: int):
        data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
        if data:
            return data.get("cash", 0)
        return 0

    # Fonction pour cr√©er ou r√©cup√©rer les donn√©es utilisateur
    def get_or_create_user_data(guild_id, user_id):
        data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
        if not data:
            data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
            collection.insert_one(data)
        return data

    if arg.isdigit() or arg.lower() == "all" or arg.lower() == "half":
        if arg.lower() == "all":
            bet = get_user_cash(guild_id, user.id)
        elif arg.lower() == "half":
            bet = get_user_cash(guild_id, user.id) // 2
        else:
            bet = int(arg)

        user_cash = get_user_cash(guild_id, user.id)

        if bet > user_cash:
            return await ctx.send(embed=discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> Tu n'as pas assez de cash pour cette mise. Tu as {user_cash} coins.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        if guild_id in active_rr_games:
            game = active_rr_games[guild_id]
            if user in game["players"]:
                return await ctx.send(embed=discord.Embed(
                    description=f"<:classic_x_mark:1362711858829725729> Tu as d√©j√† rejoint cette partie.",
                    color=discord.Color.from_rgb(255, 92, 92)
                ))
            if bet != game["bet"]:
                return await ctx.send(embed=discord.Embed(
                    description=f"<:classic_x_mark:1362711858829725729> Tu dois miser exactement {game['bet']} coins pour rejoindre cette partie.",
                    color=discord.Color.from_rgb(255, 92, 92)
                ))
            game["players"].append(user)
            return await ctx.send(embed=discord.Embed(
                description=f"{user.mention} a rejoint cette partie de Roulette Russe avec une mise de <:ecoEther:1341862366249357374> {bet}.",
                color=0x00FF00
            ))

        else:
            embed = discord.Embed(
                title="Nouvelle partie de Roulette Russe",
                description="> Pour d√©marrer cette partie : `!!rr start`\n"
                            "> Pour rejoindre : `!!rr <montant>`\n\n"
                            "**Temps restant :** 5 minutes ou 5 joueurs maximum",
                color=discord.Color.from_rgb(100, 140, 230)
            )
            msg = await ctx.send(embed=embed)

            active_rr_games[guild_id] = {
                "starter": user,
                "bet": bet,
                "players": [user],
                "message_id": msg.id
            }

            async def cancel_rr():
                await asyncio.sleep(300)
                if guild_id in active_rr_games and len(active_rr_games[guild_id]["players"]) == 1:
                    await ctx.send(embed=discord.Embed(
                        description="<:classic_x_mark:1362711858829725729> Personne n'a rejoint la roulette russe. La partie est annul√©e.",
                        color=discord.Color.from_rgb(255, 92, 92)
                    ))
                    del active_rr_games[guild_id]

            active_rr_games[guild_id]["task"] = asyncio.create_task(cancel_rr())

    elif arg.lower() == "start":
        game = active_rr_games.get(guild_id)
        if not game:
            return await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Aucune partie en cours.",
                color=discord.Color.from_rgb(240, 128, 128)
            ))
        if game["starter"] != user:
            return await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Seul le cr√©ateur de la partie peut la d√©marrer.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        if len(game["players"]) < 2:
            await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Pas assez de joueurs pour d√©marrer. La partie est annul√©e.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))
            game["task"].cancel()
            del active_rr_games[guild_id]
            return

        # D√©but du jeu
        await ctx.send(embed=discord.Embed(
            description="<:Check:1362710665663615147> La roulette russe commence...",
            color=0x00FF00
        ))
        await asyncio.sleep(1)

        eliminated = random.choice(game["players"])
        survivors = [p for p in game["players"] if p != eliminated]

        # Phase 1 : qui meurt
        embed1 = discord.Embed(
            description=f"{eliminated.display_name} tire... et se fait avoir <:imageremovebgpreview53:1362693948702855360>",
            color=discord.Color.from_rgb(255, 92, 92)
        )
        await ctx.send(embed=embed1)
        await asyncio.sleep(1)

        # Phase 2 : les survivants
        result_embed = discord.Embed(
            title="Survivants de la Roulette Russe",
            description="\n".join([f"{p.mention} remporte <:ecoEther:1341862366249357374> {game['bet'] * 2}" for p in survivors]),
            color=0xFF5C5C
        )
        await ctx.send(embed=result_embed)

        # Distribution des gains
        for survivor in survivors:
            data = get_or_create_user_data(guild_id, survivor.id)
            data["cash"] += game["bet"] * 2  # Leur propre mise + celle du perdant
            collection.update_one(
                {"guild_id": guild_id, "user_id": survivor.id},
                {"$set": {"cash": data["cash"]}}
            )

        # Retirer la mise au perdant
        loser_data = get_or_create_user_data(guild_id, eliminated.id)
        loser_data["cash"] -= game["bet"]
        collection.update_one(
            {"guild_id": guild_id, "user_id": eliminated.id},
            {"$set": {"cash": loser_data["cash"]}}
        )

        # Suppression de la partie
        game["task"].cancel()
        del active_rr_games[guild_id]

    else:
        await ctx.send(embed=discord.Embed(
            description="Utilise `!!rr <montant>` pour lancer ou rejoindre une roulette russe.",
            color=discord.Color.from_rgb(255, 92, 92)
        ))

# Set pour suivre les joueurs ayant une roulette en cours
active_roulette_players = set()

# Num√©ros corrig√©s
RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
EVEN_NUMBERS = [i for i in range(2, 37, 2)]
ODD_NUMBERS = [i for i in range(1, 37, 2)]
COLUMN_1 = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34]
COLUMN_2 = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]
COLUMN_3 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]

@bot.command(name="roulette", description="Parie sur la roulette avec un montant sp√©cifique")
async def roulette(ctx: commands.Context, bet: int, space: str):
    guild_id = ctx.guild.id
    user_id = ctx.author.id

    if user_id in active_roulette_players:
        return await ctx.send("‚è≥ Tu as d√©j√† une roulette en cours ! Attends qu'elle se termine.")

    active_roulette_players.add(user_id)

    def get_or_create_user_data(guild_id: int, user_id: int):
        data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
        if not data:
            data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
            collection.insert_one(data)
        return data

    data = get_or_create_user_data(guild_id, user_id)
    cash = data.get("cash", 0)

    if bet > cash:
        active_roulette_players.remove(user_id)
        return await ctx.send(f"Tu n'as pas assez d'argent ! Tu as {cash} en cash.")

    # D√©duction du montant pari√©
    collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"cash": -bet}})

    embed = discord.Embed(
        title=ctx.author.name,  # ou interaction.user.name selon ton contexte
        description=f"You have placed a bet of <:ecoEther:1341862366249357374>{bet} on **{space}**.",
        color=discord.Color.blue()
    )
    embed.set_footer(text="Time remaining: 10 seconds")

    # Bouton Help
    view = View()
    help_button = Button(label="Help", style=discord.ButtonStyle.primary)

    async def help_callback(interaction: discord.Interaction):
        help_embed = discord.Embed(
            title="üìò Comment jouer √† la Roulette",
            description=(
                "**üéØ Parier**\n"
                "Choisis l'espace sur lequel tu penses que la balle va atterrir.\n"
                "Tu peux parier sur plusieurs espaces en ex√©cutant la commande √† nouveau.\n"
                "Les espaces avec une chance plus faible de gagner ont un multiplicateur de gains plus √©lev√©.\n\n"
                "**‚è±Ô∏è Temps restant**\n"
                "Chaque fois qu'un pari est plac√©, le temps restant est r√©initialis√© √† 10 secondes, jusqu'√† un maximum de 1 minute.\n\n"
                "**üí∏ Multiplicateurs de gains**\n"
                "[x36] Num√©ro seul\n"
                "[x3] Douzaines (1-12, 13-24, 25-36)\n"
                "[x3] Colonnes (1st, 2nd, 3rd)\n"
                "[x2] Moiti√©s (1-18, 19-36)\n"
                "[x2] Pair/Impair\n"
                "[x2] Couleurs (red, black)"
            ),
            color=discord.Color.gold()
        )
        help_embed.set_image(url="https://github.com/Iseyg91/Isey_aime_Cass/blob/main/unknown.png?raw=true")
        await interaction.response.send_message(embed=help_embed, ephemeral=True)

    help_button.callback = help_callback
    view.add_item(help_button)

    await ctx.send(embed=embed, view=view)
    await asyncio.sleep(10)

    spin_result = random.randint(0, 36)
    win = False
    multiplier = 0

    # V√©rification du pari
    if space == "red" and spin_result in RED_NUMBERS:
        win, multiplier = True, 2
    elif space == "black" and spin_result in BLACK_NUMBERS:
        win, multiplier = True, 2
    elif space == "even" and spin_result in EVEN_NUMBERS:
        win, multiplier = True, 2
    elif space == "odd" and spin_result in ODD_NUMBERS:
        win, multiplier = True, 2
    elif space == "1-18" and 1 <= spin_result <= 18:
        win, multiplier = True, 2
    elif space == "19-36" and 19 <= spin_result <= 36:
        win, multiplier = True, 2
    elif space == "1st" and spin_result in COLUMN_1:
        win, multiplier = True, 3
    elif space == "2nd" and spin_result in COLUMN_2:
        win, multiplier = True, 3
    elif space == "3rd" and spin_result in COLUMN_3:
        win, multiplier = True, 3
    elif space == str(spin_result):
        win, multiplier = True, 36

    # Message de gain ou de perte
    if win:
        collection.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": bet * multiplier}},
        )
        result_str = f"The ball landed on: **{spin_result}**!\n\n**Winners:**\n{ctx.author.mention} won <:ecoEther:1341862366249357374> {bet * multiplier}"
    else:
        result_str = f"The ball landed on: {spin_result}!\n\nNo Winners  :("

    await ctx.send(result_str)

    # Lib√©ration du joueur
    active_roulette_players.remove(user_id)

@bot.hybrid_command(name="daily", aliases=["dy"], description="R√©clame tes Coins quotidiens.")
async def daily(ctx: commands.Context):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")
    
    guild_id = ctx.guild.id
    user_id = ctx.author.id
    now = datetime.utcnow()

    cooldown_data = collection2.find_one({"guild_id": guild_id, "user_id": user_id})
    cooldown_duration = timedelta(hours=24)

    if cooldown_data and "last_claim" in cooldown_data:
        last_claim = cooldown_data["last_claim"]
        next_claim = last_claim + cooldown_duration

        if now < next_claim:
            remaining = next_claim - now
            hours, remainder = divmod(remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            cooldown_embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> Vous devez attendre encore "
                            f"**{remaining.days * 24 + hours} heures, {minutes} minutes et {seconds} secondes** "
                            f"avant de pouvoir recevoir vos Coins quotidiens.",
                color=discord.Color.red()
            )
            return await ctx.send(embed=cooldown_embed)

    # G√©n√©ration du montant
    amount = random.randint(600, 4500)

    # R√©cup√©ration ou cr√©ation du document utilisateur
    user_data = collection.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection.insert_one(user_data)

    # Mise √† jour du solde
    old_cash = user_data["cash"]
    new_cash = old_cash + amount
    collection.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": amount}}
    )

    # Mise √† jour du cooldown
    collection2.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_claim": now}},
        upsert=True
    )

    # Embed de succ√®s
    success_embed = discord.Embed(
        description=f"<:ecoEther:1341862366249357374> Vous avez re√ßu vos **{amount:,}** Coins quotidiens.\n"
                    f"Votre prochaine r√©compense sera disponible dans **24 heures**.",
        color=discord.Color.green()
    )
    await ctx.send(embed=success_embed)

    # Log
    await log_eco_channel(
        bot=bot,
        guild_id=guild_id,
        user=ctx.author,
        action="R√©compense quotidienne",
        amount=amount,
        balance_before=old_cash,
        balance_after=new_cash,
        note="Commande /daily"
    )

from discord import app_commands
from typing import Optional
import discord
from discord.ext import commands
from discord.ui import Button, View

@bot.hybrid_command(
    name="leaderboard",
    aliases=["lb"],
    description="Affiche le classement des plus riches"
)
async def leaderboard(
    ctx: commands.Context,
    sort: Optional[str] = "total"
):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")

    guild_id = ctx.guild.id
    emoji_currency = "<:ecoEther:1341862366249357374>"
    bank_logo = "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/1344747420159967293.png?raw=true"

    # D√©tection du tri via arguments dans le message
    if isinstance(ctx, commands.Context) and ctx.message.content:
        content = ctx.message.content.lower()
        if "-cash" in content:
            sort = "cash"
        elif "-bank" in content:
            sort = "bank"
        else:
            sort = "total"

    if sort == "cash":
        sort_key = lambda u: u.get("cash", 0)
        title = f"Leaderboard - Cash"
    elif sort == "bank":
        sort_key = lambda u: u.get("bank", 0)
        title = f"Leaderboard - Banque"
    else:
        sort_key = lambda u: u.get("cash", 0) + u.get("bank", 0)
        title = f"Leaderboard - Total"

    all_users_data = list(collection.find({"guild_id": guild_id}))
    sorted_users = sorted(all_users_data, key=sort_key, reverse=True)

    page_size = 10
    total_pages = (len(sorted_users) + page_size - 1) // page_size

    def get_page(page_num: int):
        start_index = page_num * page_size
        end_index = start_index + page_size
        users_on_page = sorted_users[start_index:end_index]

        embed = discord.Embed(color=discord.Color.blue())
        embed.set_author(name="Leaderboard", icon_url=bank_logo)

        lines = []
        for i, user_data in enumerate(users_on_page, start=start_index + 1):
            user_id = user_data.get("user_id")
            if not user_id:
                continue
            user = ctx.guild.get_member(user_id)
            name = user.display_name if user else f"Utilisateur {user_id}"
            cash = user_data.get("cash", 0)
            bank = user_data.get("bank", 0)
            total = cash + bank

            if sort == "cash":
                amount = cash
            elif sort == "bank":
                amount = bank
            else:
                amount = total

            line = f"{str(i).rjust(2)}. `{name}` ‚Ä¢ {emoji_currency} {amount:,}"
            lines.append(line)

        embed.add_field(name=title, value="\n".join(lines), inline=False)

        author_data = collection.find_one({"guild_id": guild_id, "user_id": ctx.author.id})
        user_rank = next((i + 1 for i, u in enumerate(sorted_users) if u["user_id"] == ctx.author.id), None)
        embed.set_footer(text=f"Page {page_num + 1}/{total_pages}  ‚Ä¢  Ton rang: {user_rank}")
        return embed

    class LeaderboardView(View):
        def __init__(self, page_num):
            super().__init__(timeout=60)
            self.page_num = page_num

        @discord.ui.button(label="‚¨ÖÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.primary)
        async def previous_page(self, interaction: discord.Interaction, button: Button):
            if self.page_num > 0:
                self.page_num -= 1
                embed = get_page(self.page_num)
                await interaction.response.edit_message(embed=embed, view=self)

        @discord.ui.button(label="‚û°Ô∏è Suivant", style=discord.ButtonStyle.primary)
        async def next_page(self, interaction: discord.Interaction, button: Button):
            if self.page_num < total_pages - 1:
                self.page_num += 1
                embed = get_page(self.page_num)
                await interaction.response.edit_message(embed=embed, view=self)

    view = LeaderboardView(0)
    embed = get_page(0)
    await ctx.send(embed=embed, view=view)

import discord
from discord.ext import commands
from discord import app_commands
from pymongo import MongoClient
import asyncio
from datetime import datetime, timedelta

# Exemple d'items dans la boutique avec v√©rification des r√¥les ou des items
ITEMS = [
    {
        "id": 17,
        "emoji": "<:armure:1363599057863311412>",
        "title": "Armure du Berserker",
        "description": "Offre √† son utilisateur un anti-rob de 1h (au bout des 1h l'armure s'auto-consumme) et permet aussi d'utiliser la Rage du Berserker (apr√®s l'utilisation de la rage l'armure s'auto-consumme aussi) (Uniquement quand l'armure est port√©e)",
        "price": 100000,
        "emoji_price": "<:ecoEther:1341862366249357374>",
        "quantity": 5,
        "tradeable": True,
        "usable": True,
        "use_effect": "Equipe l'armure du berserker et procure une protection au rob de 1h (le temps de l'armure) et permet d'activ√© la Rage du Berserker si l'utilisateur le souhaite.",
        "requirements": {},  # Aucun requirement
        "role_id": 1363793059237593099,  # ID du r√¥le √† donner lors de l'utilisation
        "role_duration": 3600,  # Dur√©e en secondes (1 heure ici)
        "remove_after_purchase": {
            "roles": True,  # Supprimer le r√¥le apr√®s l'achat
            "items": False  # Ne pas supprimer l'item apr√®s l'achat
        }
    },
    {
        "id": 1,
        "emoji": "<:exorciste:1363602480792994003>",
        "title": "Appel √† un exorciste | ùïäùïÜùïÄ‚Ñï",
        "description": "Permet de retirer le nen que quelqu'un nous a pos√© gr√¢ce √† un exorciste !",
        "price": 50000,
        "emoji_price": "<:ecoEther:1341862366249357374>",
        "quantity": 5,
        "tradeable": True,  # Correction de `true` en `True`
        "usable": True,
        "use_effect": "Retire le r√¥le, faite !!heal",
        "requirements": {},  # Aucun requirement
        "role_id": 1363873859912335400,  # ID du r√¥le √† donner lors de l'utilisation
        "role_duration": 3600,  # Dur√©e en secondes (1 heure ici)
        "remove_after_purchase": {
            "roles": False,  # Ne pas retirer imm√©diatement le r√¥le apr√®s l'achat
            "items": False  # Ne pas supprimer l'item apr√®s l'achat
        },
        "used": False,  # Ajout d'un champ pour savoir si l'objet a √©t√© utilis√©
        "remove_role_after_use": True  # Retirer le r√¥le uniquement apr√®s utilisation
    }
]


# Fonction pour ins√©rer les items dans MongoDB
def insert_items_into_db():
    for item in ITEMS:
        if not collection16.find_one({"id": item["id"]}):
            collection16.insert_one(item)

def get_page_embed(page: int, items_per_page=10):
    start = page * items_per_page
    end = start + items_per_page
    items = ITEMS[start:end]

    embed = discord.Embed(title="üõí Boutique", color=discord.Color.blue())

    for item in items:
        formatted_price = f"{item['price']:,}".replace(",", "‚ÄØ")
        name_line = f"ID: {item['id']} | {formatted_price} {item['emoji_price']} - {item['title']} {item['emoji']}"

        # Seulement la description, sans les "requirements" et "bonus"
        value = item["description"]

        embed.add_field(name=name_line, value=value, inline=False)

    total_pages = (len(ITEMS) - 1) // items_per_page + 1
    embed.set_footer(text=f"Page {page + 1}/{total_pages}")
    return embed

# Vue pour les boutons de navigation
class Paginator(discord.ui.View):
    def __init__(self, user: discord.User):
        super().__init__(timeout=60)
        self.page = 0
        self.user = user

    async def update(self, interaction: discord.Interaction):
        embed = get_page_embed(self.page)
        await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
    async def previous(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Tu n'as pas la permission de naviguer dans ce menu.",
                color=discord.Color.red()
            )
            return await interaction.response.edit_message(embed=embed, view=self)
        if self.page > 0:
            self.page -= 1
            await self.update(interaction)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
    async def next(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Tu n'as pas la permission de naviguer dans ce menu.",
                color=discord.Color.red()
            )
            return await interaction.response.edit_message(embed=embed, view=self)
        if (self.page + 1) * 10 < len(ITEMS):
            self.page += 1
            await self.update(interaction)

# Fonction de v√©rification des requirements (r√¥les et items)
async def check_requirements(user: discord.Member, requirements: dict):
    # V√©rifier les r√¥les requis
    if "roles" in requirements:
        user_roles = [role.id for role in user.roles]
        for role_id in requirements["roles"]:
            if role_id not in user_roles:
                return False, f"Tu n'as pas le r√¥le requis <@&{role_id}>."

    # V√©rifier les items requis (dans un syst√®me de base de donn√©es par exemple)
    if "items" in requirements:
        for item_id in requirements["items"]:
            item_in_inventory = await check_user_has_item(user, item_id)  # Fonction fictive √† impl√©menter
            if not item_in_inventory:
                return False, f"Tu n'as pas l'item requis ID:{item_id}."

    return True, "Requirements v√©rifi√©s avec succ√®s."

# Fonction d'achat d'un item
async def buy_item(user: discord.Member, item_id: int):
    # Chercher l'item dans la boutique
    item = next((i for i in ITEMS if i["id"] == item_id), None)
    if not item:
        return f"L'item avec l'ID {item_id} n'existe pas."

    # V√©rifier les requirements
    success, message = await check_requirements(user, item["requirements"])
    if not success:
        return message

    # V√©rifier si le r√¥le doit √™tre ajout√© ou supprim√© apr√®s l'achat
    if item["remove_after_purchase"]["roles"]:
        role = discord.utils.get(user.guild.roles, id=item["role_id"])
        if role:
            await user.remove_roles(role)
            return f"Le r√¥le {role.name} a √©t√© supprim√© apr√®s l'achat de {item['title']}."

    if item["remove_after_purchase"]["items"]:
        # Logique pour supprimer l'item (par exemple, de l'inventaire du joueur)
        pass

    return f"L'achat de {item['title']} a √©t√© effectu√© avec succ√®s."

# Slash command /item-store
@bot.tree.command(name="item-store", description="Affiche la boutique d'items")
async def item_store(interaction: discord.Interaction):
    embed = get_page_embed(0)
    view = Paginator(user=interaction.user)
    await interaction.response.send_message(embed=embed, view=view)

# Appel de la fonction pour ins√©rer les items dans la base de donn√©es lors du d√©marrage du bot
insert_items_into_db()

@bot.tree.command(name="item-buy", description="Ach√®te un item de la boutique via son ID.")
@app_commands.describe(item_id="ID de l'item √† acheter", quantity="Quantit√© √† acheter (d√©faut: 1)")
async def item_buy(interaction: discord.Interaction, item_id: int, quantity: int = 1):
    user_id = interaction.user.id
    guild_id = interaction.guild.id

    item = collection16.find_one({"id": item_id})
    if not item:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item introuvable",
            description="Aucun item avec cet ID n'a √©t√© trouv√© dans la boutique.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    if quantity <= 0:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Quantit√© invalide",
            description="La quantit√© doit √™tre sup√©rieure √† z√©ro.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    if item["quantity"] < quantity:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Stock insuffisant",
            description=f"Il ne reste que **{item['quantity']}x** de cet item en stock.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # V√©rifier les requirements avant de permettre l'achat
    valid, message = await check_requirements(interaction.user, item.get("requirements", {}))
    if not valid:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Pr√©requis non remplis",
            description=message,
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    user_data = collection.find_one({"user_id": user_id, "guild_id": guild_id}) or {"cash": 0}
    total_price = item["price"] * quantity

    if user_data["cash"] < total_price:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Fonds insuffisants",
            description=f"Tu n'as pas assez de <:ecoEther:1341862366249357374> pour cet achat.\nPrix total : **{total_price:,}**",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # Retirer l'argent
    collection.update_one(
        {"user_id": user_id, "guild_id": guild_id},
        {"$inc": {"cash": -total_price}},
        upsert=True
    )

    # Mise √† jour de l'inventaire simple (collection7)
    existing = collection7.find_one({"user_id": user_id, "guild_id": guild_id})
    if existing:
        inventory = existing.get("items", {})
        inventory[str(item_id)] = inventory.get(str(item_id), 0) + quantity
        collection7.update_one(
            {"user_id": user_id, "guild_id": guild_id},
            {"$set": {"items": inventory}}
        )
    else:
        collection7.insert_one({
            "user_id": user_id,
            "guild_id": guild_id,
            "items": {str(item_id): quantity}
        })

    # Mise √† jour de l'inventaire structur√© (collection17)
    for _ in range(quantity):
        collection17.insert_one({
            "guild_id": guild_id,
            "user_id": user_id,
            "item_id": item_id,
            "item_name": item["title"],
            "emoji": item.get("emoji"),
            "price": item["price"],
            "acquired_at": datetime.utcnow()
        })

    # Mise √† jour du stock boutique
    collection16.update_one(
        {"id": item_id},
        {"$inc": {"quantity": -quantity}}
    )

    # Gestion de la suppression des r√¥les et items si n√©cessaire
    if item.get("remove_after_purchase"):
        # Suppression des r√¥les si la configuration l'exige
        if item["remove_after_purchase"].get("roles", False):
            role = discord.utils.get(interaction.guild.roles, id=item["role_id"])
            if role:
                await interaction.user.remove_roles(role)
                print(f"R√¥le {role.name} supprim√© pour {interaction.user.name} apr√®s l'achat.")

        # Suppression des items si la configuration l'exige
        if item["remove_after_purchase"].get("items", False):
            # Logique pour supprimer un item de l'inventaire, si n√©cessaire
            # Exemple fictif :
            inventory = collection7.find_one({"user_id": user_id, "guild_id": guild_id})
            if inventory:
                user_items = inventory.get("items", {})
                if str(item_id) in user_items:
                    user_items[str(item_id)] -= quantity
                    if user_items[str(item_id)] <= 0:
                        del user_items[str(item_id)]  # Supprimer l'item si sa quantit√© atteint z√©ro
                    collection7.update_one(
                        {"user_id": user_id, "guild_id": guild_id},
                        {"$set": {"items": user_items}}
                    )
                    print(f"{quantity} de l'item {item['title']} supprim√© de l'inventaire de {interaction.user.name}.")

    embed = discord.Embed(
        title="<:Check:1362710665663615147> Achat effectu√©",
        description=(
            f"Tu as achet√© **{quantity}x {item['title']}** {item['emoji']} "
            f"pour **{total_price:,}** {item['emoji_price']} !"
        ),
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-inventory", description="Affiche l'inventaire d'un utilisateur")
async def item_inventory(interaction: discord.Interaction, user: discord.User = None):
    user = user or interaction.user
    guild_id = interaction.guild.id

    # Curseur synchrone avec pymongo
    items_cursor = collection17.find({"guild_id": guild_id, "user_id": user.id})

    item_counts = {}
    item_details = {}

    for item in items_cursor:
        item_id = item["item_id"]
        item_counts[item_id] = item_counts.get(item_id, 0) + 1
        if item_id not in item_details:
            item_details[item_id] = {
                "title": item.get("item_name", "Nom inconnu"),
                "emoji": item.get("emoji", ""),
            }

    # Bleu doux (ex : #89CFF0)
    soft_blue = discord.Color.from_rgb(137, 207, 240)

    embed = discord.Embed(
        title="Use an item with the /item-use command.",
        color=soft_blue
    )

    embed.set_author(name=user.name, icon_url=user.avatar.url if user.avatar else user.default_avatar.url)

    if not item_counts:
        embed.title = "<:classic_x_mark:1362711858829725729> Inventaire vide"
        embed.description = "Use an item with the `/item-use` command."
        embed.color = discord.Color.red()
    else:
        lines = []
        for item_id, quantity in item_counts.items():
            details = item_details[item_id]
            lines.append(f"**{quantity}x** {details['title']} {details['emoji']} (ID: `{item_id}`)")
        embed.description = "\n".join(lines)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-info", description="Affiche toutes les informations d'un item de la boutique")
@app_commands.describe(id="ID de l'item √† consulter")
async def item_info(interaction: discord.Interaction, id: int):
    item = collection16.find_one({"id": id})
    
    if not item:
        return await interaction.response.send_message("‚ùå Aucun item trouv√© avec cet ID.", ephemeral=True)

    formatted_price = f"{item['price']:,}".replace(",", "‚ÄØ")  # Espace fine ins√©cable

    embed = discord.Embed(
        color=discord.Color.blue()
    )

    # Garder uniquement cette ligne pour afficher le nom + pp
    embed.set_author(name=interaction.user.name, icon_url=interaction.user.avatar.url)

    embed.add_field(name="**Nom de l'item**", value=item['title'], inline=False)
    embed.add_field(name="**Description**", value=item['description'], inline=False)

    embed.add_field(name="ID", value=str(item["id"]), inline=True)
    embed.add_field(name="Prix", value=f"{formatted_price} {item['emoji_price']}", inline=True)
    embed.add_field(name="Quantit√©", value=str(item.get("quantity", "Indisponible")), inline=True)

    tradeable = "‚úÖ Oui" if item.get("tradeable", False) else "‚ùå Non"
    usable = "‚úÖ Oui" if item.get("usable", False) else "‚ùå Non"

    embed.add_field(name="√âchangeable", value=tradeable, inline=True)
    embed.add_field(name="Utilisable", value=usable, inline=True)

    if item.get("use_effect"):
        embed.add_field(name="Effet √† l'utilisation", value=item["use_effect"], inline=False)

    # V√©rifier et afficher les pr√©requis
    if item.get("requirements"):
        requirements = item["requirements"]
        req_message = []

        # V√©rifier les r√¥les requis
        if "roles" in requirements:
            for role_id in requirements["roles"]:
                role = discord.utils.get(interaction.guild.roles, id=role_id)
                if role:
                    req_message.append(f"‚Ä¢ R√¥le requis: <@&{role_id}> ({role.name})")
                else:
                    req_message.append(f"‚Ä¢ R√¥le requis: <@&{role_id}> (Introuvable)")

        # V√©rifier les items requis
        if "items" in requirements:
            for required_item_id in requirements["items"]:
                item_in_inventory = await check_user_has_item(interaction.user, required_item_id)
                if item_in_inventory:
                    req_message.append(f"‚Ä¢ Item requis: ID {required_item_id} (Poss√©d√©)")
                else:
                    req_message.append(f"‚Ä¢ Item requis: ID {required_item_id} (Non poss√©d√©)")

        if req_message:
            embed.add_field(name="Pr√©requis", value="\n".join(req_message), inline=False)
        else:
            embed.add_field(name="Pr√©requis", value="Aucun pr√©requis", inline=False)

    emoji = item["emoji"]
    if emoji:
        embed.set_thumbnail(url=f"https://cdn.discordapp.com/emojis/{emoji.split(':')[2].split('>')[0]}.png")

    embed.set_footer(text="üõí Etherya ‚Ä¢ D√©tails de l'item")

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-use", description="Utilise un item de ton inventaire.")
@app_commands.describe(item_id="ID de l'item √† utiliser")
async def item_use(interaction: discord.Interaction, item_id: int):
    user = interaction.user
    user_id = user.id
    guild = interaction.guild
    guild_id = guild.id

    # V√©rifie si l'item est dans l'inventaire
    owned_item = collection17.find_one({"user_id": user_id, "guild_id": guild_id, "item_id": item_id})
    if not owned_item:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item non poss√©d√©",
            description="Tu ne poss√®des pas cet item dans ton inventaire.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # R√©cup√®re les infos de l'item
    item_data = collection16.find_one({"id": item_id})
    if not item_data or not item_data.get("usable", False):
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Utilisation impossible",
            description="Cet item n'existe pas ou ne peut pas √™tre utilis√©.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # V√©rifier les pr√©requis
    if item_data.get("requirements"):
        requirements = item_data["requirements"]
        req_message = []

        # V√©rifier les r√¥les requis
        if "roles" in requirements:
            for role_id in requirements["roles"]:
                role = discord.utils.get(interaction.guild.roles, id=role_id)
                if role and role not in user.roles:
                    req_message.append(f"‚Ä¢ R√¥le requis: <@&{role_id}> ({role.name})")
        
        # V√©rifier les items requis
        if "items" in requirements:
            for required_item_id in requirements["items"]:
                item_in_inventory = await check_user_has_item(interaction.user, required_item_id)
                if not item_in_inventory:
                    req_message.append(f"‚Ä¢ Item requis: ID {required_item_id} (Non poss√©d√©)")

        # Si des pr√©requis ne sont pas remplis, emp√™cher l'utilisation de l'item
        if req_message:
            embed = discord.Embed(
                title="<:classic_x_mark:1362711858829725729> Pr√©requis non remplis",
                description="Tu ne remplis pas les pr√©requis suivants pour utiliser cet item :\n" + "\n".join(req_message),
                color=discord.Color.red()
            )
            return await interaction.response.send_message(embed=embed)

    # Supprime un exemplaire dans l'inventaire
    collection17.delete_one({
        "user_id": user_id,
        "guild_id": guild_id,
        "item_id": item_id
    })

    embed = discord.Embed(
        title=f"<:Check:1362710665663615147> Utilisation de l'item",
        description=f"Tu as utilis√© **{item_data['title']}** {item_data.get('emoji', '')}.",
        color=discord.Color.green()
    )

    # Ajout du r√¥le si d√©fini
    role_id = item_data.get("role_id")
    if role_id:
        role = guild.get_role(int(role_id))
        if role:
            # V√©rification de la hi√©rarchie des r√¥les
            if interaction.guild.me.top_role.position > role.position:
                try:
                    await user.add_roles(role)
                    embed.add_field(name="üé≠ R√¥le attribu√©", value=f"Tu as re√ßu le r√¥le **{role.name}**.", inline=False)
                except discord.Forbidden:
                    embed.add_field(
                        name="‚ö†Ô∏è R√¥le non attribu√©",
                        value="Je n‚Äôai pas la permission d‚Äôattribuer ce r√¥le. V√©rifie mes permissions ou la hi√©rarchie des r√¥les.",
                        inline=False
                    )
            else:
                embed.add_field(
                    name="‚ö†Ô∏è R√¥le non attribu√©",
                    value="Le r√¥le est trop √©lev√© dans la hi√©rarchie pour que je puisse l‚Äôattribuer.",
                    inline=False
                )

    # Ajout d'un item bonus s'il y en a
    reward_item_id = item_data.get("gives_item_id")
    if reward_item_id:
        collection17.insert_one({
            "user_id": user_id,
            "guild_id": guild_id,
            "item_id": reward_item_id
        })
        reward_data = collection16.find_one({"id": reward_item_id})
        if reward_data:
            reward_title = reward_data["title"]
            reward_emoji = reward_data.get("emoji", "")
            embed.add_field(name="üéÅ R√©compense re√ßue", value=f"Tu as re√ßu **{reward_title}** {reward_emoji}.", inline=False)

    # Gestion de la suppression apr√®s utilisation
    if item_data.get("remove_after_use"):
        # Suppression des r√¥les apr√®s utilisation
        if item_data["remove_after_use"].get("roles", False):
            # V√©rifie si le r√¥le a √©t√© attribu√© avant de le retirer
            role = discord.utils.get(interaction.guild.roles, id=item_data["role_id"])
            if role and role in user.roles:
                await user.remove_roles(role)
                embed.add_field(name="‚ö†Ô∏è R√¥le supprim√©", value=f"Le r√¥le **{role.name}** a √©t√© supprim√© apr√®s l'utilisation de l'item.", inline=False)
                print(f"R√¥le {role.name} supprim√© pour {interaction.user.name} apr√®s l'utilisation de l'item.")

        # Suppression des items apr√®s utilisation
        if item_data["remove_after_use"].get("items", False):
            # Suppression de l'item de l'inventaire
            collection17.delete_one({
                "user_id": user_id,
                "guild_id": guild_id,
                "item_id": item_id
            })
            print(f"Item ID {item_id} supprim√© de l'inventaire de {interaction.user.name}.")

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-give", description="(Admin) Donne un item √† un utilisateur.")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    member="Utilisateur √† qui donner l'item",
    item_id="ID de l'item √† donner",
    quantity="Quantit√© d'items √† donner"
)
async def item_give(interaction: discord.Interaction, member: discord.Member, item_id: int, quantity: int = 1):
    guild_id = interaction.guild.id
    user_id = member.id

    # V√©rifie si l'item existe dans la boutique
    item_data = collection16.find_one({"id": item_id})
    if not item_data:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item introuvable",
            description="Cet item n'existe pas dans la boutique.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    if quantity < 1:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Quantit√© invalide",
            description="La quantit√© doit √™tre d'au moins **1**.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # Ajoute l'item dans la collection17 (inventaire structur√©)
    for _ in range(quantity):
        collection17.insert_one({
            "user_id": user_id,
            "guild_id": guild_id,
            "item_id": item_id,
            "item_name": item_data["title"],
            "emoji": item_data.get("emoji", ""),
            "price": item_data.get("price"),
            "acquired_at": datetime.utcnow()
        })

    item_name = item_data["title"]
    emoji = item_data.get("emoji", "")

    embed = discord.Embed(
        title=f"<:Check:1362710665663615147> Item donn√©",
        description=f"**{quantity}x {item_name}** {emoji} ont √©t√© donn√©s √† {member.mention}.",
        color=discord.Color.green()
    )

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-take", description="(Admin) Retire un item d'un utilisateur.")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    member="Utilisateur √† qui retirer l'item",
    item_id="ID de l'item √† retirer",
    quantity="Quantit√© d'items √† retirer"
)
async def item_take(interaction: discord.Interaction, member: discord.Member, item_id: int, quantity: int = 1):
    guild_id = interaction.guild.id
    user_id = member.id

    # V√©rifie si l'item existe
    item_data = collection16.find_one({"id": item_id})
    if not item_data:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item introuvable",
            description="Cet item n'existe pas dans la boutique.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    item_name = item_data["title"]
    emoji = item_data.get("emoji", "")

    # V√©rifie combien l'utilisateur en poss√®de
    owned_count = collection17.count_documents({
        "user_id": user_id,
        "guild_id": guild_id,
        "item_id": item_id
    })

    if owned_count < quantity:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Quantit√© insuffisante",
            description=f"{member.mention} ne poss√®de que **{owned_count}x {item_name}** {emoji}. Impossible de retirer {quantity}.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # Supprime les exemplaires un par un
    for _ in range(quantity):
        collection17.delete_one({
            "user_id": user_id,
            "guild_id": guild_id,
            "item_id": item_id
        })

    embed = discord.Embed(
        title="<:Check:1362710665663615147> Item retir√©",
        description=f"**{quantity}x {item_name}** {emoji} ont √©t√© retir√©s de l'inventaire de {member.mention}.",
        color=discord.Color.green()
    )

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="item-sell", description="Vends un item √† un autre utilisateur pour un prix donn√©.")
@app_commands.describe(
    member="L'utilisateur √† qui vendre l'item",
    item_id="ID de l'item √† vendre",
    price="Prix de vente de l'item",
    quantity="Quantit√© d'items √† vendre (par d√©faut 1)"
)
async def item_sell(interaction: discord.Interaction, member: discord.User, item_id: int, price: int, quantity: int = 1):
    guild_id = interaction.guild.id
    seller_id = interaction.user.id
    buyer_id = member.id

    item_data = collection16.find_one({"id": item_id})
    if not item_data:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item introuvable",
            description="Cet item n'existe pas dans la boutique.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    item_name = item_data["title"]
    emoji = item_data.get("emoji", "")

    owned_count = collection17.count_documents({
        "user_id": seller_id,
        "guild_id": guild_id,
        "item_id": item_id
    })

    if owned_count < quantity:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Vente impossible",
            description=f"Tu ne poss√®des que **{owned_count}x {item_name}** {emoji}.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    buyer_data = collection.find_one({"guild_id": guild_id, "user_id": buyer_id}) or {"cash": 1500}
    total_price = price * quantity

    # V√©rification du cash uniquement
    if buyer_data.get("cash", 0) < total_price:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Fonds insuffisants",
            description=f"{member.mention} n'a pas assez d'argent en **cash** pour acheter **{quantity}x {item_name}** {emoji}.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    # Boutons
    class SellView(View):
        def __init__(self):
            super().__init__(timeout=60)

        @discord.ui.button(label="‚úÖ Accepter", style=discord.ButtonStyle.green)
        async def accept_sell(self, interaction_btn: discord.Interaction, button: Button):
            if interaction_btn.user.id != buyer_id:
                return await interaction_btn.response.send_message("‚ùå Ce n'est pas ton offre.", ephemeral=True)

            # Transfert de l'item
            for _ in range(quantity):
                collection17.insert_one({
                    "user_id": buyer_id,
                    "guild_id": guild_id,
                    "item_id": item_id,
                    "item_name": item_name,
                    "emoji": emoji,
                    "price": price,
                    "acquired_at": datetime.utcnow()
                })
                collection17.delete_one({
                    "user_id": seller_id,
                    "guild_id": guild_id,
                    "item_id": item_id
                })

            # Paiement
            collection.update_one(
                {"guild_id": guild_id, "user_id": buyer_id},
                {"$inc": {"cash": -total_price}},  # D√©cr√©mentation du cash de l'acheteur
                upsert=True
            )
            collection.update_one(
                {"guild_id": guild_id, "user_id": seller_id},
                {"$inc": {"cash": total_price}},  # Ajout du cash au vendeur
                upsert=True
            )

            confirm_embed = discord.Embed(
                title="<:Check:1362710665663615147> Vente conclue",
                description=f"{member.mention} a achet√© **{quantity}x {item_name}** {emoji} pour **{total_price:,}** <:ecoEther:1341862366249357374>.",
                color=discord.Color.green()
            )
            await interaction_btn.response.edit_message(embed=confirm_embed, view=None)

        @discord.ui.button(label="‚ùå Refuser", style=discord.ButtonStyle.red)
        async def decline_sell(self, interaction_btn: discord.Interaction, button: Button):
            if interaction_btn.user.id != buyer_id:
                return await interaction_btn.response.send_message("‚ùå Ce n'est pas ton offre.", ephemeral=True)

            cancel_embed = discord.Embed(
                title="<:classic_x_mark:1362711858829725729> Offre refus√©e",
                description=f"{member.mention} a refus√© l'offre.",
                color=discord.Color.red()
            )
            await interaction_btn.response.edit_message(embed=cancel_embed, view=None)

    view = SellView()

    offer_embed = discord.Embed(
        title=f"üí∏ Offre de {interaction.user.display_name}",
        description=f"{interaction.user.mention} te propose **{quantity}x {item_name}** {emoji} pour **{total_price:,}** <:ecoEther:1341862366249357374>.",
        color=discord.Color.gold()
    )
    offer_embed.set_footer(text="Tu as 60 secondes pour accepter ou refuser.")

    await interaction.response.send_message(embed=offer_embed, content=member.mention, view=view)

@bot.tree.command(name="item-leaderboard", description="Affiche le leaderboard des utilisateurs poss√©dant un item sp√©cifique.")
@app_commands.describe(
    item_id="ID de l'item dont vous voulez voir le leaderboard"
)
async def item_leaderboard(interaction: discord.Interaction, item_id: int):
    guild = interaction.guild
    guild_id = guild.id

    item_data = collection16.find_one({"id": item_id})
    if not item_data:
        embed = discord.Embed(
            title="<:classic_x_mark:1362711858829725729> Item introuvable",
            description="Aucun item n'existe avec cet ID.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    item_name = item_data["title"]
    item_emoji = item_data.get("emoji", "")

    # Agr√©gation des quantit√©s par utilisateur
    pipeline = [
        {"$match": {"guild_id": guild_id, "item_id": item_id}},
        {"$group": {"_id": "$user_id", "quantity": {"$sum": 1}}},
        {"$sort": {"quantity": -1}},
        {"$limit": 10}
    ]
    leaderboard = list(collection17.aggregate(pipeline))

    if not leaderboard:
        embed = discord.Embed(
            title="üìâ Aucun r√©sultat",
            description=f"Aucun utilisateur ne poss√®de **{item_name}** {item_emoji} dans ce serveur.",
            color=discord.Color.dark_grey()
        )
        return await interaction.response.send_message(embed=embed)

    embed = discord.Embed(
        title=f"üèÜ Leaderboard : {item_name} {item_emoji}",
        description="Classement des membres qui poss√®dent le plus cet item :",
        color=discord.Color.blurple()
    )

    for i, entry in enumerate(leaderboard, start=1):
        user = guild.get_member(entry["_id"])
        name = user.display_name if user else f"<Utilisateur inconnu `{entry['_id']}`>"
        embed.add_field(
            name=f"{i}. {name}",
            value=f"{entry['quantity']}x {item_name} {item_emoji}",
            inline=False
        )

    await interaction.response.send_message(embed=embed)


from datetime import datetime
import discord
from discord.ext import commands

@bot.hybrid_command(name="collect-income", aliases=["collect"])
async def collect_income(ctx: commands.Context):
    member = ctx.author
    guild = ctx.guild
    now = datetime.utcnow()
    collected = []
    cooldowns = []

    for config in COLLECT_ROLES_CONFIG:
        role = discord.utils.get(guild.roles, id=config["role_id"])
        if role not in member.roles or config.get("auto", False):
            continue

        cd_data = collection5.find_one({"guild_id": guild.id, "user_id": member.id, "role_id": role.id})
        last_collect = cd_data.get("last_collect") if cd_data else None

        if last_collect:
            elapsed = (now - last_collect).total_seconds()
            if elapsed < config["cooldown"]:
                remaining = config["cooldown"] - elapsed
                cooldowns.append((remaining, role))
                continue

        eco_data = collection.find_one({"guild_id": guild.id, "user_id": member.id}) or {
            "guild_id": guild.id, "user_id": member.id, "cash": 1500, "bank": 0
        }
        before = eco_data["cash"]
        eco_data["cash"] += config["amount"]

        collection.update_one(
            {"guild_id": guild.id, "user_id": member.id},
            {"$set": {"cash": eco_data["cash"]}},
            upsert=True
        )

        collection5.update_one(
            {"guild_id": guild.id, "user_id": member.id, "role_id": role.id},
            {"$set": {"last_collect": now}},
            upsert=True
        )

        collected.append(f"1 - {role.mention} | <:ecoEther:1341862366249357374>**{config['amount']}** (bank)")
        await log_eco_channel(bot, guild.id, member, f"Collect ({role.name})", config["amount"], before, eco_data["cash"], note="Collect manuel")

    if collected:
        embed = discord.Embed(
            title=f"{member.display_name}",
            description="<:Check:1362710665663615147> Role income successfully collected!\n\n" + "\n".join(collected),
            color=discord.Color.green()
        )
        embed.set_thumbnail(url=member.display_avatar.url)
        await ctx.send(embed=embed)

    elif cooldowns:
        shortest = min(cooldowns, key=lambda x: x[0])  # (remaining, role)
        remaining_minutes = int(shortest[0] // 60) or 1
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> You can next collect income dans **{remaining_minutes}min** (`{shortest[1].name}`)",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            description="‚ùå Tu n'as aucun r√¥le avec `collect` disponible.",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)

@bot.tree.command(name="restock", description="Restock un item dans la boutique")
@app_commands.describe(item_id="ID de l'item √† restock", quantity="Nouvelle quantit√© √† d√©finir")
async def restock(interaction: discord.Interaction, item_id: int, quantity: int):
    if interaction.user.id != ISEY_ID:
        return await interaction.response.send_message("‚ùå Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    item = collection16.find_one({"id": item_id})
    if not item:
        return await interaction.response.send_message(f"‚ùå Aucun item trouv√© avec l'ID {item_id}.", ephemeral=True)

    collection16.update_one({"id": item_id}, {"$set": {"quantity": quantity}})
    return await interaction.response.send_message(
        f"‚úÖ L'item **{item['title']}** a bien √©t√© restock√© √† **{quantity}** unit√©s.", ephemeral=True
    )

@bot.tree.command(name="reset-item", description="R√©initialise ou supprime les items dans la boutique")
@app_commands.describe(item_id="ID de l'item √† r√©initialiser ou supprimer")
async def reset_item(interaction: discord.Interaction, item_id: int):
    if interaction.user.id != ISEY_ID:
        return await interaction.response.send_message("‚ùå Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    item = collection16.find_one({"id": item_id})
    if not item:
        return await interaction.response.send_message(f"‚ùå Aucun item trouv√© avec l'ID {item_id}.", ephemeral=True)

    # Suppression de l'item dans la base de donn√©es
    collection16.delete_one({"id": item_id})

    return await interaction.response.send_message(
        f"‚úÖ L'item **{item['title']}** a bien √©t√© supprim√© de la boutique.", ephemeral=True
    )

BADGES = [
    {
        "id": 1,
        "emoji": "<:HxH:1363865482288955562>",
        "title": "Badge Hunter X Hunter",
        "description": "Badge Collector.",
    },
    {
        "id": 2,
        "emoji": "<:gon:1363870934066266304>",
        "title": "Badge Gon",
        "description": "Badge Collector",
    },
]

@bot.tree.command(name="badge-store", description="Affiche la boutique de badges")
async def badge_store(interaction: discord.Interaction):
    badges = list(collection19.find({}))
    if not badges:
        return await interaction.response.send_message("Aucun badge disponible pour l‚Äôinstant.", ephemeral=True)

    def get_badge_embed(page: int = 0, items_per_page=10):
        start = page * items_per_page
        end = start + items_per_page
        badges_page = BADGES[start:end]

        embed = discord.Embed(title="Collection de Badges", color=discord.Color.purple())

        for badge in badges_page:
            name_line = f"ID: {badge['id']} | {badge['title']} {badge['emoji']}"
            value = badge["description"]
            embed.add_field(name=name_line, value=value, inline=False)

        total_pages = (len(BADGES) - 1) // items_per_page + 1
        embed.set_footer(text=f"Page {page + 1}/{total_pages}")
        return embed

    class BadgePaginator(discord.ui.View):
        def __init__(self, user):
            super().__init__(timeout=60)
            self.page = 0
            self.user = user

        async def update(self, interaction):
            await interaction.response.edit_message(embed=get_badge_embed(self.page), view=self)

        @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
        async def prev(self, interaction, button):
            if interaction.user.id != self.user.id:
                return await interaction.response.send_message("‚ùå Tu ne peux pas utiliser ces boutons.", ephemeral=True)
            if self.page > 0:
                self.page -= 1
                await self.update(interaction)

        @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
        async def next(self, interaction, button):
            if interaction.user.id != self.user.id:
                return await interaction.response.send_message("‚ùå Tu ne peux pas utiliser ces boutons.", ephemeral=True)
            if (self.page + 1) * 10 < len(BADGES):
                self.page += 1
                await self.update(interaction)

    view = BadgePaginator(interaction.user)
    await interaction.response.send_message(embed=get_badge_embed(), view=view, ephemeral=True)

# Appel de la fonction pour ins√©rer les items dans la base de donn√©es lors du d√©marrage du bot
insert_badge_into_db()

@bot.tree.command(name="badge-inventory", description="Affiche ton inventaire de badges")
async def badge_inventory(interaction: discord.Interaction):
    data = collection20.find_one({"user_id": interaction.user.id})
    if not data or not data.get("badges"):
        return await interaction.response.send_message("Tu ne poss√®des aucun badge pour l‚Äôinstant.", ephemeral=True)

    user_badges = data["badges"]
    badge_list = list(collection19.find({"id": {"$in": user_badges}}))

    def get_inventory_embed(page=0, per_page=10):
        embed = discord.Embed(title=f"üéñÔ∏è Badges de {interaction.user.display_name}", color=discord.Color.orange())
        start = page * per_page
        end = start + per_page
        for badge in badge_list[start:end]:
            embed.add_field(
                name=f"ID: {badge['id']} | {badge['name']} {badge['emoji']}",
                value=badge["description"],
                inline=False
            )
        total_pages = (len(badge_list) - 1) // per_page + 1
        embed.set_footer(text=f"Page {page + 1}/{total_pages}")
        return embed

    class InventoryPaginator(discord.ui.View):
        def __init__(self, user):
            super().__init__(timeout=60)
            self.page = 0
            self.user = user

        async def update(self, interaction):
            await interaction.response.edit_message(embed=get_inventory_embed(self.page), view=self)

        @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
        async def prev(self, interaction, button):
            if interaction.user.id != self.user.id:
                return await interaction.response.send_message("‚ùå Tu ne peux pas utiliser ces boutons.", ephemeral=True)
            if self.page > 0:
                self.page -= 1
                await self.update(interaction)

        @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
        async def next(self, interaction, button):
            if interaction.user.id != self.user.id:
                return await interaction.response.send_message("‚ùå Tu ne peux pas utiliser ces boutons.", ephemeral=True)
            if (self.page + 1) * 10 < len(badge_list):
                self.page += 1
                await self.update(interaction)

    view = InventoryPaginator(interaction.user)
    await interaction.response.send_message(embed=get_inventory_embed(), view=view, ephemeral=True)

@bot.tree.command(name="badge-give", description="(Admin) Donne un badge √† un utilisateur.")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    member="Utilisateur √† qui donner le badge",
    badge_id="ID du badge √† donner"
)
async def badge_give(interaction: discord.Interaction, member: discord.Member, badge_id: int):
    badge = collection19.find_one({"id": badge_id})
    if not badge:
        embed = discord.Embed(
            title="‚ùå Badge introuvable",
            description="Ce badge n'existe pas.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    user_data = collection20.find_one({"user_id": member.id})
    if user_data and badge_id in user_data.get("badges", []):
        embed = discord.Embed(
            title="‚ùå Badge d√©j√† poss√©d√©",
            description=f"{member.mention} poss√®de d√©j√† ce badge.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    collection20.update_one(
        {"user_id": member.id},
        {"$addToSet": {"badges": badge_id}},
        upsert=True
    )

    embed = discord.Embed(
        title="üéñÔ∏è Badge donn√©",
        description=f"Le badge **{badge['title']}** {badge['emoji']} a √©t√© donn√© √† {member.mention}.",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="badge-take", description="(Admin) Retire un badge d'un utilisateur.")
@app_commands.checks.has_permissions(administrator=True)
@app_commands.describe(
    member="Utilisateur √† qui retirer le badge",
    badge_id="ID du badge √† retirer"
)
async def badge_take(interaction: discord.Interaction, member: discord.Member, badge_id: int):
    badge = collection19.find_one({"id": badge_id})
    if not badge:
        embed = discord.Embed(
            title="‚ùå Badge introuvable",
            description="Ce badge n'existe pas.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    user_data = collection20.find_one({"user_id": member.id})
    if not user_data or badge_id not in user_data.get("badges", []):
        embed = discord.Embed(
            title="‚ùå Badge non poss√©d√©",
            description=f"{member.mention} ne poss√®de pas ce badge.",
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed)

    collection20.update_one(
        {"user_id": member.id},
        {"$pull": {"badges": badge_id}}
    )

    embed = discord.Embed(
        title="üßº Badge retir√©",
        description=f"Le badge **{badge['title']}** {badge['emoji']} a √©t√© retir√© √† {member.mention}.",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="reset-badge", description="R√©initialise ou supprime un badge de la boutique")
@app_commands.describe(badge_id="ID du badge √† r√©initialiser ou supprimer")
async def reset_badge(interaction: discord.Interaction, badge_id: int):
    if interaction.user.id != ISEY_ID:
        return await interaction.response.send_message("‚ùå Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    badge = collection19.find_one({"id": badge_id})
    if not badge:
        return await interaction.response.send_message(f"‚ùå Aucun badge trouv√© avec l'ID {badge_id}.", ephemeral=True)

    # Supprime le badge de la boutique
    collection19.delete_one({"id": badge_id})

    return await interaction.response.send_message(
        f"‚úÖ Le badge **{badge['title']}** {badge.get('emoji', '')} a √©t√© supprim√© de la boutique.", ephemeral=True
    )

@bot.tree.command(name="start-rewards", description="D√©finit la date de d√©but des rewards (r√©serv√© √† ISEY)")
async def start_rewards(interaction: discord.Interaction):
    if interaction.user.id != ISEY_ID:
        await interaction.response.send_message("‚ùå Tu n'es pas autoris√© √† utiliser cette commande.", ephemeral=True)
        return

    guild_id = interaction.guild.id

    # V√©rifie si une date est d√©j√† enregistr√©e
    existing = collection22.find_one({"guild_id": guild_id})
    if existing:
        await interaction.response.send_message(
            f"‚ö†Ô∏è Les rewards ont d√©j√† √©t√© d√©marr√©s le <t:{int(existing['start_timestamp'])}:F>.",
            ephemeral=True
        )
        return

    now = datetime.utcnow()
    timestamp = int(now.timestamp())

    collection22.insert_one({
        "guild_id": guild_id,
        "start_date": now.isoformat(),
        "start_timestamp": timestamp
    })

    await interaction.response.send_message(
        f"‚úÖ Le syst√®me de rewards a bien √©t√© lanc√© ! D√©but : <t:{timestamp}:F>",
        ephemeral=True
    )

# === FONCTION POUR DONNER LA R√âCOMPENSE ===
async def give_reward(interaction: discord.Interaction, day: int):
    reward = rewards.get(day)
    if not reward:
        await interaction.response.send_message("Aucune r√©compense disponible pour ce jour.", ephemeral=True)
        return

    coins = reward["coins"]
    badge = reward["badge"]
    item = reward["item"]

    user_data = collection_rewards.find_one({"guild_id": interaction.guild.id, "user_id": interaction.user.id})
    if not user_data:
        user_data = {"guild_id": interaction.guild.id, "user_id": interaction.user.id, "rewards_received": {}}

    user_data["rewards_received"][str(day)] = reward
    collection_rewards.update_one(
        {"guild_id": interaction.guild.id, "user_id": interaction.user.id},
        {"$set": user_data},
        upsert=True
    )

    # Cr√©ation de l'embed avec le progress bar
    days_elapsed = (datetime.utcnow() - get_start_date(interaction.guild.id)).days + 1
    total_days = 7
    days_received = len(user_data["rewards_received"])

    embed = discord.Embed(title="üéÅ R√©compense de la journ√©e", description=f"Voici ta r√©compense pour le jour {day} !", color=discord.Color.green())
    embed.add_field(name="Coins", value=f"{coins} <:ecoEther:1341862366249357374>", inline=False)
    if badge:
        embed.add_field(name="Badge", value=f"Badge ID {badge}", inline=False)
    if item:
        embed.add_field(name="Item", value=f"Item ID {item}", inline=False)
    embed.set_image(url=reward["image_url"])

    # Progress bar avec les jours re√ßus
    progress = "‚ñà" * days_received + "‚ñë" * (total_days - days_received)
    embed.add_field(name="Progress", value=f"{progress} ({days_received}/{total_days})", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)

# === COMMANDE SLASH /rewards ===
@bot.tree.command(name="rewards", description="R√©cup√®re ta r√©compense quotidienne")
async def rewards(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    user_id = interaction.user.id

    start_date = get_start_date(guild_id)
    if not start_date:
        await interaction.response.send_message("Le syst√®me de r√©compenses n'est pas encore configur√©.", ephemeral=True)
        return

    days_elapsed = (datetime.utcnow() - start_date).days + 1
    if days_elapsed > 7:
        await interaction.response.send_message("La p√©riode de r√©compenses est termin√©e.", ephemeral=True)
        return

    user_data = collection_rewards.find_one({"guild_id": guild_id, "user_id": user_id})
    received = user_data.get("rewards_received", {}) if user_data else {}

    # V√©rifie si une r√©compense pr√©c√©dente a √©t√© manqu√©e
    for i in range(1, days_elapsed):
        if str(i) not in received:
            await interaction.response.send_message("Tu as manqu√© un jour. Tu ne peux plus r√©cup√©rer les r√©compenses.", ephemeral=True)
            return

    # V√©rifie si la r√©compense d‚Äôaujourd‚Äôhui est d√©j√† r√©cup√©r√©e
    if str(days_elapsed) in received:
        await interaction.response.send_message("Tu as d√©j√† r√©cup√©r√© ta r√©compense aujourd'hui.", ephemeral=True)
        return

    await give_reward(interaction, days_elapsed)

# Token pour d√©marrer le bot (√† partir des secrets)
# Lancer le bot avec ton token depuis l'environnement  
keep_alive()
bot.run(token)
